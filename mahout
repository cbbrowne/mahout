#!/bin/bash

SUBCOMMAND=$1
PARM1=$2
PARM2=$3

MAHOUTOMITSCHEMAS=${MAHOUTOMITSCHEMAS:-${PGCOMITSCHEMAS:-"('pg_catalog','information_schema','${MAHOUTSCHEMA}')"}}

help () {
     echo "
mahout: a schema management tool for PostgreSQL

mahout commands:
 mahout init [PROJECTNAME]
    Initializes a mahout project
 mahout capture
    Captures pgcmp files to use for database schema comparisons
 mahout attach [VERSION]
    Initializes the present non-mahoutized database schema to the specified
    version.  Fail if the schema does not match that version.
 mahout install
    Installs a mahout-managed schema in a blank database
 mahout check
    Checks the version indicated by mahout.conf/MAHOUTCONFIG and checks the 
    schema against that version using pgcmp
 mahout upgrade
    Performs an upgrade from the present version to the latest version
 mahout diff
    Finds differences between the current version and what is expected
 mahout history
    List mahout upgrade activities performed against the local database
 mahout changes
    List mahout scripts to be applied.
    List objects that are being changed by the upgrade
 mahout build [BUILDNAME] [FORMAT]
    Generates a build in specified format, one of (tar, tar.gz, tar.bz)
 mahout slony-attach [VERSION]
    Initializes the present non-mahoutized database schemas for Slony cluster
    to the specified version.  Fail if any of the schemas does not match
    that version.
 mahout slonik
    Prepares a slonik script to upgrade replicated cluster to the latest/specified version
 validate_control
    Runs validation tests on the mahout.control file
"
}

DEBUGS=0
NOTICES=0
WARNINGS=0
PROBLEMS=0
MAHOUTLOG=.mahout-log

function glog () {
    local level=$1
    local notice=$2
    local ccode
    local creset
    creset='\e[0m'
    logger -i -p "${level}" -t "mahout ${SUBCOMMAND}" "${notice}"
    if [ -d ${MAHOUTLOG} ]; then
	when=`date --rfc-3339=seconds`
	echo "${when} ${level} mahout ${notice}" >> ${MAHOUTLOG}/mahout.log
    fi
    case ${level} in
	user.info)
	    ccode='\e[37m'
	    CONFIG=$((${CONFIG} + 1))
	    ;;
	user.notice)
	    ccode='\e[32m'
	    NOTICES=$((${NOTICES} + 1))
	    ;;
	user.warning)
	    ccode='\e[33m'
	    WARNINGS=$((${WARNINGS} + 1))
	    ;;
	user.error)
	    ccode='\e[31m'
	    PROBLEMS=$((${PROBLEMS} + 1))
	    ;;
    esac	    
    case ${level} in
	user.debug)
	    DEBUGS=$((${DEBUGS} + 1))
  	    ;;
	*)
	    echo -e "${ccode}${level} mahout ${notice}${creset}"
	    ;;
    esac
}

function summary () {
    local STEP=$1
    glog user.notice "mahout ${STEP} complete with ${NOTICES} notices, ${WARNINGS} warnings, ${PROBLEMS} errors"
}

function read_mahout_config () {
    if [[ "x${MAHOUTCONFIG}" == "x" ]]; then
	glog user.info "mahout ${SUBCOMMAND} loading config from mahout.conf"
	source mahout.conf
    else
	### See if MAHOUTCONFIG exists, and is a file
	if [[ -f ${MAHOUTCONFIG} ]]; then
	    glog user.info "mahout ${SUBCOMMAND} loading config from [${MAHOUTCONFIG}]"
	    source ${MAHOUTCONFIG}
	else
	    glog user.error "mahout ${SUBCOMMAND} cannot load config from [${MAHOUTCONFIG}]"
	    exit 1
	fi
    fi
}

function mahout_init () {
    local MAHOUTHOME=${PWD}/$1
    local problems=0
    local MO
    local MDB
    local MSU
    local MCL
    local PGCH
    local PGCD
    local PGCC
    MDB=${MAINDATABASE:-${PGDATABASE:-"PGDATABASEUNSET"}}
    MSU=${SUPERUSERACCESS:-${PGDATABASE:-"SUPERUSERACCESSUNSET"}}
    MCL=${COMPARISONDATABASE:-${PGDATABASE:-"COMPARISONDATABASEUNSET"}}
    PGCH=${PGCMPHOME:-"/home/cbbrowne/PostgreSQL/pgcmp"}
    MHSCH=${MAHOUTSCHEMA:-"Mahout"}
    MPGBINDIR=${PGBINDIR:-"/var/lib/postgresql/dbs/postgresql-9.1/bin"}
    glog user.info "Mahout schema: [${MHSCH}]"
    glog user.info "Superuser access: ${SUPERUSERACCESS}"

    if [ -d $MAHOUTHOME ]; then
	glog user.error "Directory [${MAHOUTHOME}] already exists - aborting"
	exit 1
    else
	mkdir $MAHOUTHOME 
    fi
    
    MO=${MAHOUTHOME}/mahout.conf
    echo "mahout: setting up mahout repository in mahout directory: [${MO}]"
    echo "mahout: sample mahout.conf in ${MO}"
    echo "# Sample mahout file" > ${MO}
    echo "# MAINDATABASE: Main Database being managed by Mahout" >> ${MO}
    echo "MAINDATABASE=${MDB}" >> ${MO}
    echo "# SUPERUSERACCESS: Superuser URI for database being managed by Mahout" >> ${MO}
    echo "SUPERUSERACCESS=${MSU}" >> ${MO}
    echo "# COMPARISONDATABASE: URI for comparison database to be used for comparisons" >> ${MO}
    echo "COMPARISONDATABASE=${MCL}" >> ${MO}

    GITIGNORE=${MAHOUTHOME}/.gitignore
    echo "# Default git ignores" > ${GITIGNORE}
    echo ".mahout-data" >> ${GITIGNORE}
    echo ".mahout-logs" >> ${GITIGNORE}
    echo ".mahout-temp" >> ${GITIGNORE}
    echo ".mahout-builds" >> ${GITIGNORE}
    echo "*.md5sum" >> ${GITIGNORE}
    echo "*.locks-acquired" >> ${GITIGNORE}
    echo "*.log" >> ${GITIGNORE}

    if [ "${MSU}" == "${MDB}" ]; then
	glog user.warning "Main database connection (MAINDATABASE=[${MDB}] same as Superuser connection (SUPERUSERACCESS=[${MSU}]"
    fi
    if [ "${MCL}" == "${MDB}" ]; then
	glog user.warning "Main database connection (MAINDATABASE=[${MDB}] same as Comparison connection (COMPARISONDATABASE=[${MCL}]"
    fi
    
    echo "# MAHOUTOMITSCHEMAS: set of schemas to ignore for comparisons" >> ${MO}
    echo "MAHOUTOMITSCHEMAS=\"${MAHOUTOMITSCHEMAS}\"" >> ${MO}
    echo "# PGCMPHOME: location to find pgcmp, pgcmp-dump" >> ${MO}
    echo "PGCMPHOME=${PGCH}" >> ${MO}
    echo "# MAHOUTSCHEMA: which schema to use for Mahout database objects" >> ${MO}
    echo "MAHOUTSCHEMA=${MHSCH}" >> ${MO}				      
    echo "PGBINDIR=${PGBINDIR:-\"${MPGBINDIR}\"}" >> ${MO}

    for pgm in pgcmp pgcmp-dump; do
	if [ -x ${PGCH}/${pgm} ]; then
	    glog user.notice "found ${PGCH}/${pgm} executable OK"
	else
	    glog user.error "did not find executable ${PGCH}/${pgm}"
	fi
    done
    echo "# Add additional configuration parameters for scripts after this" >> ${MO}

    MAHOUTLOG=${MAHOUTHOME}/.mahout-logs
    mkdir ${MAHOUTLOG}
    
    MAHOUTCAP=${MAHOUTHOME}/.mahout-data
    if [ -d ${MAHOUTCAP} ]; then
	glog user.error "Capture directory MAHOUTCAP [${MAHOUTCAP}] already exists"
	exit 1
    else
	mkdir ${MAHOUTCAP}
	glog user.info "Setting up directory MAHOUTCAP [${MAHOUTCAP}]"
    fi
    MAHOUTTMP=${MAHOUTHOME}/.mahout-temp
    mkdir ${MAHOUTTMP}
    
    MAHOUTBLD=${MAHOUTHOME}/.mahout-builds
    if [ -d ${MAHOUTBLD} ]; then
	glog user.error "Builds directory MAHOUTBLD [${MAHOUTBLD}] already exists"
	exit 1
    else
	mkdir ${MAHOUTBLD}
	glog user.info "Setting up directory MAHOUTBLD [${MAHOUTBLD}]"
    fi
    
    MAHOUTCTL=${MAHOUTHOME}/mahout.control
    if [ -e ${MAHOUTCTL} ]; then
	glog user.error "Control file MAHOUTCTL=[${MAHOUTCTL}] already exists"
    else
	echo "# Initialized mahout.control" > ${MAHOUTCTL}
	echo "# add sections after this to indicate versions" >> ${MAHOUTCTL}
	echo "version Base"  >> ${MAHOUTCTL}
	echo "superuser Base/base-schema.sql"  >> ${MAHOUTCTL}
    fi
    case $PROBLEMS in
	0)
	    glog user.notice "mahout init complete: no serious configuration problems noticed"
	    ;;
	*)
	    glog user.warning "mahout init encountered ${PROBLEMS} serious configuration problems"
	    ;;
    esac

    mkdir $MAHOUTHOME/Base
    glog user.info "Dumping database ${MDB} to Base/base-schema.sql"
    pg_dump -d ${MDB} -s > $MAHOUTHOME/Base/base-schema.sql
    cat $MAHOUTHOME/Base/base-schema.sql | md5sum > $MAHOUTHOME/Base/base-schema.sql.md5sum
    checksum=`cat $MAHOUTHOME/Base/base-schema.sql.md5sum`
    glog user.info "mahout: initial control file set up indicating schema from ${MDB} as schema"
    glog user.info "mahout: base schema set up with checksum [${checksum}]"
    glog user.info "mahout: please edit ${MO} to validate configuration parameters"

    echo "begin;  create schema if not exists \"${MHSCH}\";  set search_path to \"${MHSCH}\";
    create table if not exists version_log (version text primary key, install_start timestamptz default now(), install_end timestamptz);
    create table if not exists action_log (id serial primary key, action_start timestamptz default now(), action_end timestamptz, action text, version text, action_type text, action_source text, action_md5 text, result text, success boolean);
  delete from version_log;
  delete from action_log;
  insert into version_log (version, install_start, install_end)
     select 'Base', now(), clock_timestamp();
  insert into action_log (action_start, action_end, action, version, action_type, action_source, action_md5, result, success)
  select now(), clock_timestamp(), 'Initialize Base Schema', 'Base', 'initialize', 'mahout tool', '${checksum}', 'completed', 't'::boolean;
  commit; " > ${MAHOUTTMP}/setup-mahout-schema.sql

    psql -d ${MDB} -f ${MAHOUTTMP}/setup-mahout-schema.sql > ${MAHOUTTMP}/setup-mahout-schema.log 2>&1
    retcode=$?
    if [ $retcode -ne 0 ]; then
	glog user.error "Unable to setup mahout schema in database [${MDB}]"
	exit 1
    else
	glog user.info "Setup mahout schema in database [${MDB}]"
    fi
    
    # And capture the pgcmp output as .mahout-data/Base.pgcmp
    (cd ${MAHOUTHOME}; MAHOUTOMITSCHEMAS="${MAHOUTOMITSCHEMAS}" dump_current_schema Base ${MAHOUTHOME}/.mahout-data/Base.pgcmp $MDB)
    summary init
}

function split_versions () {
    local versioncontent=$1
    local sanswhitecomments
    local cversion

    sanswhitecomments=`mktemp /tmp/mahout-split-versions.XXXXXXXXXXXXX`
    cut -d \# -f 1 < mahout.control | \
	sed "s/^[ \t]*//" | \
	sed "s/[ \t]*$//" | \
	sed "s/[\t]/ /g" | \
	sed "s/  / /g"           > ${sanswhitecomments}
    
    cversion="InvalidUntilVersionEstablished"

    while read line
    do
	# if we get a new version, then change version files
	if [[ $(echo ${line} | egrep -c "^version ") -eq 1 ]]; then
	    cversion=`echo $line | cut -d " " -f 2`
	fi
	if [[ $(echo ${line} | egrep -c "^common tests") -eq 1 ]]; then
	    cversion=CommonTests
	fi
	
	case ${cversion} in
	    InvalidUntilVersionEstablished)
		echo "line preceding first version" > /dev/null
		;;
	    *)
		echo ${line} >> ${versioncontent}/${cversion}
		;;
	esac
    done < ${sanswhitecomments}

    rm -f ${sanswhitecomments}
}


# Generate version ordering
function calculate_dependencies () {
    local depfodder=$1
    local dependencies=$2
    local versionorder=$3
    glog user.debug "calculate_dependencies (${depfodder},${dependencies},${versionorder})"
    
    local dropcomments=`mktemp /tmp/mahout-version-ordering.sanscomments.XXXXXXXXXXX`
    local dropwhitespace=`mktemp /tmp/mahout-version-ordering.sanswhitespace.XXXXXXXXXXX`
    cut -d \# -f 1 < mahout.control > ${dropcomments}
    sed "s/^[ \t]*//" < ${dropcomments} | sed "s/[ \t]*$//" > ${dropwhitespace}
    
    egrep -n "^(version|requires)" ${dropwhitespace} > ${depfodder}
    local dversion
    local drequires

    echo "Base Base" > ${dependencies}
    while read line
    do
	if [ $(echo "${line}" | egrep -c "^[0-9]+:version") -eq 1 ]; then
	    dversion=`echo ${line} | cut -d : -f 2 | sed "s/^version //"`
	fi
	if [ $(echo "${line}" | egrep -c "^[0-9]+:requires") -eq 1 ]; then
	    drequires=`echo ${line} | cut -d : -f 2 | sed "s/^requires[ \t]//"`
	    echo "${drequires} ${dversion}" >> ${dependencies}
	fi
    done < ${depfodder}
    glog user.info "Generated dependency list: ${dependencies}"
    tsort ${dependencies} > ${versionorder}
    retcode=$?
    if [ $retcode -ne 0 ]; then
	glog user.error "Dependency cycle found - see [${dependencies}]"
    else
	glog user.notice "Dependencies checked, no cycles found OK"
    fi
    rm -f ${dropcomments} ${dropwhitespace}
}

function validate_control () {
    local CTL=${PWD}/mahout.control
    glog user.info "validate_control: validating control file [${CTL}]"
    if [ -e ${CTL} ]; then
	glog user.info "Found [${CTL}]"
	local dropcomments=`mktemp /tmp/mahout-ctl-check.sanscomments.XXXXXXXXXXX`
	local dropwhitespace=`mktemp /tmp/mahout-ctl-check.sanswhitespace.XXXXXXXXXXX`
	local badlines=`mktemp /tmp/mahout-ctl-check.badlines.XXXXXXXXXXX`
	local psqlscripts=`mktemp /tmp/mahout-ctl-check.psql.XXXXXXXXXXX`
	local shellscripts=`mktemp /tmp/mahout-ctl-check.shellscripts.XXXXXXXXXXX`
	cut -d \# -f 1 < ${CTL} > ${dropcomments}
	sed "s/^[ \t]*//" < ${dropcomments} | sed "s/[ \t]*$//" > ${dropwhitespace}
	
	egrep -n -v "^(version|psql|common tests|psqltest|requires|superuser|shell)[ ]*" ${dropwhitespace} | egrep -v "^[0-9]+:$" > ${badlines}
	NUMBAD=`cat ${badlines} | wc -l`
	if [[ ${NUMBAD} -gt 0 ]]; then
	    glog user.error "Found ${NUMBAD} ill-formatted lines"
	    cat ${badlines}
	    exit 1
	fi
	# check that psql lines refer to files that actually exist
        egrep -n "^psql " ${dropwhitespace} > ${psqlscripts}
	local line
	while read line
	do
	    lineno=`echo ${line} | cut -d : -f 1`
	    pfilename=`echo ${line} | sed 's/^[0-9]*: *psql[ \t]*//'`
	    if [ -e ${pfilename} ]; then
		glog user.notice "psql file ${pfilename} on line ${lineno} exists"
	    else
		glog user.error "psql file ${pfilename} on line ${lineno} does not exist"
	    fi
	done < ${psqlscripts}

	# check that shell lines refer to files that actually exist
        egrep -n "^shell " ${dropwhitespace} > ${shellscripts}
	local shelldata
	local shellfile
	local shellparm
	local line
	while read line
	do
	    lineno=`echo ${line} | cut -d : -f 1`
	    shelldata=`echo ${line} | sed 's/^[0-9]*: *shell[ \t]*//'`
	    shellfile=`echo $shelldata | cut -d " " -f 1`
	    shellparm=`echo $shelldata | cut -d " " -f 2`
	    if [ -e ${shellfile} ]; then
		if [ -x ${shellfile} ]; then
		    glog user.notice "shell file ${shellfile} on line ${lineno} exists, executable"
		else
		    glog user.error "shell file ${shellfile} on line ${lineno} exists, NOT executable"
		fi
	    else
		glog user.error "shell file ${shellfile} on line ${lineno} does not exist"
	    fi
	done < ${shellscripts}
	
	# check that all requires point to valid versions
	local vfile=`mktemp /tmp/mahout-ctl-check.versions.XXXXXXXXXXX`
	local rfile=`mktemp /tmp/mahout-ctl-check.requires.XXXXXXXXXXX`
	egrep -n "^version" ${dropwhitespace} > ${vfile}
	egrep -n "^requires" ${dropwhitespace} > ${rfile}
	
	while read line
	do
	    lineno=`echo ${line} | cut -d : -f 1`
	    required=`echo ${line} | sed 's/^[0-9]*: *requires[ \t]*//'`
	    requiredver=`egrep "^[0-9]*:version[ \t]*${required}\$" ${vfile}`
	    if [ "${requiredver}" != "" ]; then
		glog user.debug "Line ${lineno} expects prerequisite ${required}, found ${requiredver}"
	    else
		glog user.error "Line ${lineno} wants version ${required}, not found"
	    fi
	done < ${rfile}
	
	# check that there are no loops
	# Assemble dependencies, run through tsort
	local depfodder=`mktemp /tmp/mahout-ctl-check-dependency-fodder.XXXXXXXXXXXX`
	local dependencies=`mktemp /tmp/mahout-ctl-check-dependencies.XXXXXXXXXXXX`
	local versionorder=`mktemp /tmp/mahout-ctl-check-versionorder.XXXXXXXXXXXX`
	calculate_dependencies ${depfodder} ${dependencies} ${versionorder}
	
	rm -f ${shortened} ${dropcomments} ${dropwhitespace} ${badlines} ${psqlscripts} ${badlines} ${vfile} ${rfile} ${shellscripts}  ${versionorder} ${depfodder}
    else
	glog user.error "Control file [${CTL}] not found"
	exit 1
    fi
    if [ $PROBLEMS -gt 0 ]; then
	echo "Problems found - error count: ${PROBLEMS}"
	exit 1
    else
	exit 0
    fi
}

function in_mahout_home () {
    # see if we're in a Mahout directory
    local PSTART
    PSTART=${PROBLEMS}
    if [ -e mahout.control ]; then
	glog user.debug "found mahout.control"
    else
	glog user.error "mahout.control not found"
    fi
    if [ -e mahout.conf ]; then
	glog user.debug "found mahout.conf"
    else
	glog user.error "mahout.conf not found"
    fi
    if [ -d .mahout-data ]; then
	glog user.debug "found .mahout-data directory"
    else
	glog user.error ".mahout-data directory not found"
    fi
    if [ -d .mahout-logs ]; then
	glog user.debug "found .mahout-logs directory"
    else
	glog user.error ".mahout-logs directory not found"
    fi
    glog user.debug "PSTART: ${PSTART} PROBLEMS: ${PROBLEMS}"
    if [[ ${PSTART} -ne ${PROBLEMS} ]]; then
	glog user.error "mahout directory not properly set up"
	echo "1"
    else
	echo "0"
    fi	
}

function get_mahout_version () {
    local DBURI=$1
    local DBVERSIONQ="select version from \"${MAHOUTSCHEMA}\".version_log order by install_end desc limit 1;"
    local DBVERSION=`psql -d ${DBURI} -qAt -c "${DBVERSIONQ}"`
    rc=$?
    if [ $rc != 0 ]; then
	glog user.error "get_mahout_version - query for version failed - rc=[${rc}] for [${DBVERSIONQ}]"
	exit 1
    else
	echo ${DBVERSION}
    fi
}

function version_load_start () {
    local version=$1
    psql -d ${MAINDATABASE} -c "insert into \"${MAHOUTSCHEMA}\".version_log (version, install_start) values ('${version}', now());"  > /dev/null 2>&1
    local retcode=$?
    if [ $retcode -ne 0 ]; then
	glog user.error "Unable to set up version log for version [${version}] against database [${MAINDATABASE}]"
	exit 1
    else
	glog user.info "Begin load of version [${version}] to database [${MAINDATABASE}]"
    fi
}

function version_load_end () {
    local version=$1
    psql -d ${MAINDATABASE} -c "update \"${MAHOUTSCHEMA}\".version_log set install_end = now() where version = '${version}';"  > /dev/null 2>&1

    local retcode=$?
    if [ $retcode -ne 0 ]; then
	glog user.error "Unable to complete version logging for version [${version}] against database [${MAINDATABASE}]"
	exit 1
    else
	glog user.notice "Complete load of version [${version}] to database [${MAINDATABASE}]"
    fi
}

function action_start () {
    local version=$1
    local action=$2
    local actiontype=$3
    local actionsource=$4
    local amd5=$5
    
    local asquery="insert into \"${MAHOUTSCHEMA}\".action_log (version, action_start, action, action_type, action_source, action_md5) values ('${version}', now(), '${action}', '${actiontype}', '${actionsource}', '${amd5}');"

    psql -d ${MAINDATABASE} -c "${asquery}" > /dev/null 2>&1

    local retcode=$?
    if [ $retcode -ne 0 ]; then
	glog user.error "Unable to record action logging for version [${version}]/source[${actionsource}]/md5sum[${amd5}] against database [${MAINDATABASE}]"
	exit 1
    else
	glog user.debug "Recorded action logging for version [${version}]/source[${actionsource}]/md5sum[${amd5}] against database [${MAINDATABASE}]"
    fi
}
function action_end () {
    local version=$1
    local action=$2
    local actiontype=$3
    local actionsource=$4
    local amd5=$5
    local success=$6
    
    local asquery="update \"${MAHOUTSCHEMA}\".action_log set result = 'completed', success='${success}', action_end=now() where version='${version}' and action='${action}' and action_type='${actiontype}' and action_source='${actionsource}' and action_md5 = '${amd5}' and action_end is null;"

    psql -d ${MAINDATABASE} -c "${asquery}"  > /dev/null 2>&1

    local retcode=$?
    if [ $retcode -ne 0 ]; then
	glog user.error "Unable to complete action logging for version [${version}]/action[${action}]/actiontype[${actiontype}]/source[${actionsource}]/md5sum[${amd5}] against database [${MAINDATABASE}]"
	exit 1
    else
	glog user.debug "Completed action logging for version [${version}]/source[${asource}]/md5sum[${amd5}] against database [${MAINDATABASE}]"
    fi
}

# Dump current schema so that we can check that it is a good match
function dump_current_schema () {
    local LABEL=$1
    local TARGET=$2
    local DATABASE=$3
    glog user.info "Dump [${LABEL}] schema data for database [${DATABASE}] via pgcmp-dump into ${TARGET}"
    
    # Dump current schema using pgcmp-dump
    PGBINDIR=${PGBINDIR} PGCLABEL=${LABEL} PGURI=${DATABASE} PGCOMITSCHEMAS=${MAHOUTOMITSCHEMAS} PGCMPOUTPUT=${TARGET} ${PGCMPHOME}/pgcmp-dump > /dev/null
    rc=$?
    if [ $rc -ne 0 ]; then
	glog user.error "Failure to use pgcmp to dump schema metadata for label [${LABEL}] - rc=[${rc}]"
    else
	glog user.notice "Dumped schema pgcmp for database [${DATABASE}] data label [${LABEL}] to ${TARGET}"
    fi
}

function mahout_capture () {
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT
    
    INMAHOUT=`in_mahout_home`
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "capture: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    
    # acquire configuration from mahout.conf
    read_mahout_config
    glog user.info "Applying changes to database MAINDATABASE=[${MAINDATABASE}]"

    # check the version in the database
    local DBVERSION=`get_mahout_version "${MAINDATABASE}"`
    glog user.info "capture: found version: ${DBVERSION}"

    # Use pgcmp to check that the version in the database
    # matches... Note that it should match EXACTLY; this is not a
    # production application
    CAPTUREFILE=${PWD}/.mahout-temp/capturedb.pgcmp
    MAHOUTOMITSCHEMAS="${MAHOUTOMITSCHEMAS}" dump_current_schema capturedb ${CAPTUREFILE} ${MAINDATABASE}

    # we should compare against the pgcmp dump
    local VERSIONDUMP=.mahout-data/${DBVERSION}.pgcmp
    if [ -e ${VERSIONDUMP} ]; then
	glog user.info "Found pgcmp data for version ${DBVERSION} - [${VERSIONDUMP}]"
	PGBINDIR=${PGBINDIR} PGURI=${COMPARISONDATABASE} PGCMPINPUT1=${CAPTUREFILE} PGCMPINPUT2=${VERSIONDUMP} PGCLABEL1=${DBVERSION} PGCLABEL2=capturedb ${PGCMPHOME}/pgcmp > /dev/null 2>&1
	rc=$?
	case $rc in
	    2)
		glog user.error "Unable to run pgcmp comparison"
		;;
	    3)
		glog user.error "pgcmp ran, some items did not match between database and version ${DBVERSION}"
		;;
	    0)
		glog user.notice "pgcmp completed, all matched - rc=${rc}"
		;;
	esac
    else
	glog user.error "Failed to find pgcmp data for version ${DBVERSION} - [${VERSIONDUMP}]"
	exit 1
    fi
    
    local depfodder=`mktemp /tmp/mahout-capture-dependency-fodder.XXXXXXXXXXXX`
    local dependencies=`mktemp /tmp/mahout-capture-dependencies.XXXXXXXXXXXX`
    local versionorder=`mktemp /tmp/mahout-capture-version-order.XXXXXXXXXXXX`
    local versioncontent=`mktemp -d /tmp/mahout-capture-version-content.XXXXXXXXXXXX`
    calculate_dependencies ${depfodder} ${dependencies} ${versionorder}
    glog user.debug "calced dependencies"

    split_versions ${versioncontent}

    local TEMPSQLFILE=`mktemp /tmp/mahout-capture-sql-application.XXXXXXXXXXX`
    versionswanted=false
    for propversion in `cat ${versionorder}`; do
	if [[ $propversion == ${DBVERSION} ]]; then
	    # We have reached the point at which versions should get captured
	    versionswanted=true
	    glog user.notice "Capture examining versions to apply - already on ${propversion}"
	else
	    if [[ $versionswanted == "true" ]]; then
		# need to apply scripts to the database
		glog user.notice "Capture needs to apply version ${propversion} from ${versioncontent}/${propversion}"
		version_load_start ${propversion}

		while read line
		do
		    if [[ $(echo ${line} | egrep -c "^version ") -eq 1 ]]; then
			glog user.debug "no action apropos for version line"
		    fi
		    if [[ $(echo ${line} | egrep -c "^requires ") -eq 1 ]]; then
  		        glog user.debug "no action apropos for requires line"
		    fi
		    if [[ $(echo ${line} | egrep -c "^psql ") -eq 1 ]]; then
			local sqlscript=`echo ${line} | cut -d " " -f 2`
			glog user.notice "apply SQL Script ${sqlscript}"
			md5sum=`md5sum < ${sqlscript}`
			cat ${sqlscript} | md5sum > ${sqlscript}.md5sum
			action_start $propversion capture "psql script" ${sqlscript} "${md5sum}"
			echo "create temp table t_starting_locks as select n.nspname, c.relname, l.mode, l.granted from pg_catalog.pg_class c, pg_catalog.pg_namespace n, pg_catalog.pg_locks l where c.oid = l.relation and c.relnamespace = n.oid and nspname not in ('pg_catalog') and nspname not like 'pg_toast%' and nspname not like 'pg_temp%';" > ${TEMPSQLFILE}
			cat ${sqlscript} >> ${TEMPSQLFILE}
			rc=$?
			case $rc in
			    0)
				glog user.debug "constructed ${sqlscript} into ${TEMPSQLFILE} ok"
			        ;;
			    1)
				glog user.error "SQL script ${sqlscript} not found"
				exit 2
				;;
			    *)
				glog user.error "Error adding in SQL script ${sqlscript} - rc=[${rc}]"
				exit 3
				;;
			esac				
				echo "create temp table t_ending_locks as select n.nspname, c.relname, l.mode, l.granted from pg_catalog.pg_class c, pg_catalog.pg_namespace n, pg_catalog.pg_locks l where c.oid = l.relation and c.relnamespace = n.oid and nspname not in ('pg_catalog') and nspname not like 'pg_toast%' and nspname not like 'pg_temp%';
create temp table t_locks_acquired as select nspname, relname, mode from t_ending_locks e where not exists (select 1 from t_starting_locks s where s.nspname = e.nspname and s.relname = e.relname and s.mode = e.mode);
" >> ${TEMPSQLFILE}
			echo "\COPY (select nspname, relname, mode from t_locks_acquired) to '${sqlscript}.${propversion}.locks-acquired';" >> ${TEMPSQLFILE}
			psql -d ${MAINDATABASE} -f ${TEMPSQLFILE} --variable ON_ERROR_STOP=1 --single-transaction > ${sqlscript}.${propversion}.log 2>&1
			retcode=$?
			if [ $retcode -ne 0 ]; then
			    glog user.error "psql script ${sqlscript} failed against database [${MDB}]"
			    action_end ${propversion} "capture" "psql script" "${sqlscript}" "${md5sum}" f
			    exit 1
			else
			    action_end ${propversion} "capture" "psql script" "${sqlscript}" "${md5sum}" t
			    rm ${TEMPSQLFILE}
			fi
		    fi
		    if [[ $(echo ${line} | egrep -c "^superuser ") -eq 1 ]]; then
			local sqlscript=`echo ${line} | cut -d " " -f 2`
			echo "apply SQL Superuser Script ${sqlscript}"
			md5sum=`md5sum < ${sqlscript}`
			echo ${md5sum} > ${sqlscript}.md5sum
			action_start ${propversion} "capture" "psql superuser script" "${sqlscript}" "${md5sum}"
			echo "create temp table t_starting_locks as select n.nspname, c.relname, l.mode, l.granted from pg_catalog.pg_class c, pg_catalog.pg_namespace n, pg_catalog.pg_locks l where c.oid = l.relation and c.relnamespace = n.oid and nspname not in ('pg_catalog') and nspname not like 'pg_toast%' and nspname not like 'pg_temp%';" > ${TEMPSQLFILE}
			cat ${sqlscript} >> ${TEMPSQLFILE}
			echo "create temp table t_ending_locks as select n.nspname, c.relname, l.mode, l.granted from pg_catalog.pg_class c, pg_catalog.pg_namespace n, pg_catalog.pg_locks l where c.oid = l.relation and c.relnamespace = n.oid and nspname not in ('pg_catalog') and nspname not like 'pg_toast%' and nspname not like 'pg_temp%';
create temp table t_locks_acquired as select nspname, relname, mode from t_ending_locks e where not exists (select 1 from t_starting_locks s where s.nspname = e.nspname and s.relname = e.relname and s.mode = e.mode);
" >> ${TEMPSQLFILE}
			echo "\COPY (select nspname, relname, mode from t_locks_acquired) to '${sqlscript}.${propversion}.locks-acquired';" >> ${TEMPSQLFILE}
			psql -d ${SUPERUSERACCESS} -f ${TEMPSQLFILE} --variable ON_ERROR_STOP=1 --single-transaction > ${sqlscript}.${propversion}.log 2>&1
			retcode=$?
			if [ $retcode -ne 0 ]; then
			    glog user.error "superuser script ${sqlscript} failed against database [${MAINDATABASE}]"
			    action_end ${propversion} capture "psql superuser script" "${sqlscript}" "${md5sum}" f
			    exit 1
			else
			    action_end ${propversion} capture "psql superuser script" "${sqlscript}" "${md5sum}" t
			    rm ${TEMPSQLFILE}
			fi
		    fi
		    if [[ $(echo ${line} | egrep -c "^shell ") -eq 1 ]]; then
			local shellscript=`echo ${line} | cut -d " " -f 2`
			local shellarg=`echo ${line} | cut -d " " -f 3`
			cat ${shellscript} | md5sum > ${shellscript}.md5sum

			action_start ${propversion} "capture" "shell script" "${shellscript}" "${md5sum}"			
			MAINDATABASE=${MAINDATABASE} ./${shellscript} ${!shellarg} > ./${shellscript}.${propversion}.log 2>&1
			action_end ${propversion} "capture" "shell script" "${shellscript}" "${md5sum}" t
		    fi
		    if [[ $(echo ${line} | egrep -c "^psqltest ") -eq 1 ]]; then
			local testscript=`echo ${line} | cut -d " " -f 2`
			echo "apply SQL test script ${testscript}"
			md5sum=`md5sum < ${testscript}`
			echo ${md5sum} > ${testscript}.md5sum
			action_start ${propversion} "capture" "psql test script" "${testscript}" "${md5sum}"
			psql -d ${MAINDATABASE} --variable ON_ERROR_STOP=1 -f ${testscript} --single-transaction > ${testscript}.${propversion}.log 2>&1
			retcode=$?
			if [ $retcode -eq 0 ]; then
			    action_end ${propversion} "capture" "psql test script" "${testscript}" "${md5sum}" t
			    
			else
			    glog user.error "test script ${testscript} failed against database [${MAINDATABASE}]"
			    action_end ${propversion} "capture" "psql test script" "${testscript}" "${md5sum}" f			
			fi
		    fi
		    if [[ $(echo ${line} | egrep -c "^common tests ") -eq 1 ]]; then
			glog user.debug "no action apropos for common tests"
		    fi
		    glog user.debug "line of ${propversion}: ${line}"
		done < ${versioncontent}/${propversion}

		# Apply new version to it...
		version_load_end ${propversion}

		# Run common tests
		if [ -f ${versioncontent}/CommonTests ]; then
		    glog user.debug "Checking which CommonTests to run"
		    while read line
		    do
			local vfrom=Base
			local vto=`tail -1 ${versionorder}`
			local testscript
			glog user.debug "common test check for line ${line}"
			## Most specific... # psqltest from v1 to v2 testname
			if [ $(echo ${line} | egrep -c "^psqltest from [a-zA-Z0-9.]+ to [a-zA-Z0-9.]+") -eq 1 ]; then
			    # split out psql from v1 to v2 testname
			    vfrom=`echo ${line} | cut -d " " -f 3`
			    vto=`echo ${line} | cut -d " " -f 5`
			    testscript=`echo ${line} | cut -d " " -f 6`
			    glog user.debug "test [${testscript}] is run from [${vfrom}] to [${vto}]"
			else
			    if [ $(echo ${line} | egrep -c "^psqltest from [a-zA-Z0-9.]+") -eq 1 ]; then
				vfrom=`echo ${line} | cut -d " " -f 3`
				testscript=`echo ${line} | cut -d " " -f 4`
				glog user.debug "test [${testscript}] is run from [${vfrom}]"
			    else
				if [ $(echo ${line} | egrep -c "^psqltest [a-zA-Z0-9.]+") -eq 1 ]; then
				    testscript=`echo ${line} | cut -d " " -f 2`
				    glog user.debug "Always run test [${testscript}]"
				else
				    glog user.debug "No test on line ${line}"
				    testscript=""
				fi
			    fi
			fi
			if [ "${testscript}" != "" ]; then
			    glog user.debug "common test [${testscript}] to be run from [${vfrom}] to [${vto}]"
			    # now, iterate across the versions in ${versionorder} and see if
			    # the present version ${propversion} is within the range
			    local ver_in_range=false
			    local reached_ver=false
			    local reached_from=false
			    local reached_to=false
			    local past_to=false
			    for vi in `cat ${versionorder}`; do
				if [ ${vi} == ${propversion} ]; then
				    reached_ver=true
				fi
				if [ ${vi} == ${vfrom} ]; then
				    reached_from=true
				fi
				if [ ${vi} == ${vto} ]; then
				    reached_to=true
				fi
				if [ $reached_to == true ]; then
				    if [ $vi != ${vto} ]; then
					past_to=true
				    fi
				fi
				# if present version is within the range then...
				# - reached_ver = true
				# - past_to = false
				if [ $reached_ver == "true" ]; then
				    if [ $past_to == "false" ]; then
					ver_in_range=true
				    fi
				fi
				glog user.debug "vi:${vi} cversion: ${propversion}  from:${vfrom} to:${vto} reached_ver:${reached_ver} ver_in_range:${ver_in_range} reached_from:${reached_from} reached_to:${reached_to} past_to:${past_to}"
			    done
			    if [ $ver_in_range == "true" ]; then
				glog user.notice "running common SQL test script ${testscript}"
				md5sum=`md5sum < ${testscript}`
				echo ${md5sum} > ${testscript}.md5sum
				action_start ${propversion} "capture" "psql test script" "${testscript}" "${md5sum}"
				psql -d ${MAINDATABASE} --variable ON_ERROR_STOP=1 -f ${testscript} --single-transaction > ${testscript}.${propversion}.log 2>&1
				retcode=$?
				if [ $retcode -eq 0 ]; then
				    action_end ${propversion} "capture" "psql test script" "${testscript}" "${md5sum}" t
				    
				else
				    glog user.error "test script ${testscript} failed against database [${MAINDATABASE}]"
				    action_end ${propversion} "capture" "psql test script" "${testscript}" "${md5sum}" f			
				fi
			    else
				glog user.notice "Not running common test ${testscript} - version [${propversion}] not in range ([${vfrom}],[${vto}])"
			    fi
			fi
		    done < ${versioncontent}/CommonTests
		fi
		
		# then run pgcmp-dump to get the version
		VERSIONOUTPUT=${PWD}/.mahout-data/${propversion}.pgcmp
		dump_current_schema ${propversion} ${VERSIONOUTPUT} ${MAINDATABASE}
   	    else
		glog user.debug "Capture not applying earlier version ${propversion}"
	    fi
	fi
    done		
    rm -f ${depfodder} ${dependencies} ${versionorder}
    rm -rf ${versioncontent}
    summary capture
}

function mahout_check () {
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT
    
    INMAHOUT=`in_mahout_home`
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "check: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi

    # acquire configuration from mahout.conf
    read_mahout_config
    # check the version in the database
    DBVERSION=`get_mahout_version ${MAINDATABASE}`
    glog user.info "check: found version: ${DBVERSION}"
    
    # Dump current schema using pgcmp-dump
    CURRENTCMP=${PWD}/.mahout-temp/CurrentSchema.pgcmp
    dump_current_schema CurrentSchema ${CURRENTCMP} ${MAINDATABASE}
    
    # Also check md5 checksums on /all/ scripts
    #    - just a new loop...
    local sanswhitecomments=`mktemp /tmp/mahout-split-cleanwhitespace.XXXXXXXXXXXXX`
    local allscripts=`mktemp /tmp/mahout-check-all-scripts.XXXXXXXXXXXX`
    local lineno
    local action
    local filename
    cut -d \# -f 1 < mahout.control | \
	sed "s/^[ \t]*//" | \
	sed "s/[ \t]*$//" | \
	sed "s/[\t]/ /g" | \
	sed "s/  / /g"           > ${sanswhitecomments}
    egrep -n "^(psql|superuser|shell|psqltest|common tests)[ \t]*" ${sanswhitecomments} > ${allscripts}
    while read line
    do
	lineno=`echo ${line} | cut -d : -f 1`
	action=`echo ${line} | cut -d : -f 2 | cut -d " " -f 1`
	filename=`echo ${line} | cut -d : -f 2 | cut -d " " -f 2`
	if [ -f ${filename} ]; then
	    # is there an md5 sum file?
	    if [ -f ${filename}.md5sum ]; then
		recordedsum=`cat ${filename}.md5sum`
		computedsum=`cat ${filename} | md5sum -`
		if [ "${recordedsum}" != "${computedsum}" ]; then
		    glog user.error "checksum mismatch for action ${action} / file ${filename} - computed: [${computedsum}] recorded: [${recordedsum}]"
		else
		    glog user.notice "checksum fine for action ${action} / file ${filename} - [${computedsum}]"
		fi
	    else
		glog user.error "no checksum recorded for action ${action} / file ${filename}"
	    fi
	else
	    glog user.error "no script file recorded for action ${action} / file ${filename}"
	fi
    done < ${allscripts}

    # pgcmp can have a set of acceptable differences...
    #    - Needs to have a config parm for PGCEXPLANATIONS
    glog user.notice "run pgcmp to examine schema for differences against version ${DBVERSION}"

    PGCMPWORK=`mktemp -d /tmp/mahout-check-pgcmp-work.XXXXXXXXXXX`
    PGBINDIR=${PGBINDIR} PGCLABEL1=TempCurrent PGCLABEL2=${DBVERSION} PGURI=${COMPARISONDATABASE} PGCOMITSCHEMAS=${MAHOUTOMITSCHEMAS} PGCMPINPUT1=${CURRENTCMP} PGCMPINPUT2=.mahout-data/${DBVERSION}.pgcmp PGCWORKDIR=${PGCMPWORK}  ${PGCMPHOME}/pgcmp
    rc=$?
    case ${rc} in
	0)
	    glog user.notice "pgcmp found exact match"
	    ;;
	2)
	    glog user.error "pgcmp failed to run properly - see ${PGCMPWORK}/perform-comparison.log"
	    exit 1
	    ;;
	3)
	    glog user.error "pgcmp found differences inadequately explained"
	    exit 2
	    ;;
    esac
    # clean up temp files now...
    rm -rf ${PGCMPWORK} ${sanswhitecomments} ${allscripts} ${CURRENTCMP}
    summary check
}

function mahout_upgrade () {
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT
    
    INMAHOUT=`in_mahout_home`
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "upgrade: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    # acquire configuration from mahout.conf
    read_mahout_config
    # check the version in the database
    DBVERSION=`get_mahout_version ${MAINDATABASE}`
    glog user.info "upgrade: found version: ${DBVERSION}"

    # Dump current schema using pgcmp-dump
    local CURRENTCMP=${PWD}/.mahout-temp/CurrentSchema.pgcmp
    dump_current_schema CurrentSchema ${CURRENTCMP} ${MAINDATABASE}

    glog user.info "run pgcmp to examine schema for differences against version ${DBVERSION}"
    PGCMPWORK=`mktemp -d /tmp/mahout-upgrade-pgcmp-work.XXXXXXXXXXX`
    PGBINDIR=${PGBINDIR} PGCLABEL1=CurrentSchema PGCLABEL2=${DBVERSION} PGURI=${COMPARISONDATABASE} PGCOMITSCHEMAS=${MAHOUTOMITSCHEMAS} PGCMPINPUT1=${CURRENTCMP} PGCMPINPUT2=.mahout-data/${DBVERSION}.pgcmp PGCWORKDIR=${PGCMPWORK}  ${PGCMPHOME}/pgcmp
    rc=$?
    case ${rc} in
	0)
	    glog user.notice "pgcmp found exact match"
	    ;;
	2)
	    glog user.error "pgcmp failed to run properly - see ${PGCMPWORK}/perform-comparison.log"
	    exit 1
	    ;;
	3)
	    glog user.error "pgcmp found differences inadequately explained"
	    exit 2
	    ;;
    esac

    # Very similar to mahout_capture, except that it doesn't write out md5sum/pgcmp output
    local depfodder=`mktemp /tmp/mahout-upgrade-dependency-fodder.XXXXXXXXXXXX`
    local dependencies=`mktemp /tmp/mahout-upgrade-dependencies.XXXXXXXXXXXX`
    local versionorder=`mktemp /tmp/mahout-upgrade-version-order.XXXXXXXXXXXX`
    local versioncontent=`mktemp -d /tmp/mahout-upgrade-version-content.XXXXXXXXXXXX`
    calculate_dependencies ${depfodder} ${dependencies} ${versionorder}
    glog user.notice "calced dependencies"
    split_versions ${versioncontent}
    versionswanted=false
    for propversion in `cat ${versionorder}`; do
	if [[ $propversion == ${DBVERSION} ]]; then
	    # We have reached the point at which versions should get captured
	    versionswanted=true
	    glog user.notice "Capture examining versions to apply - already on ${propversion}"
	else
	    if [[ $versionswanted == "true" ]]; then
		# need to apply scripts to the database
		glog user.notice "Upgrade needs to apply version ${propversion}"
		version_load_start ${propversion}
		
		glog user.notice "From script ${versioncontent}/${propversion}"
		while read line
		do
		    if [[ $(echo ${line} | egrep -c "^version ") -eq 1 ]]; then
			echo "no action apropos for version line"
		    fi
		    if [[ $(echo ${line} | egrep -c "^requires ") -eq 1 ]]; then
  		        echo "no action apropos for requires line"
		    fi
		    if [[ $(echo ${line} | egrep -c "^psql ") -eq 1 ]]; then
			local sqlscript=`echo ${line} | cut -d " " -f 2`
			glog user.notice "apply SQL Script ${sqlscript}"
			md5sum=`md5sum < ${sqlscript}`
			cat ${sqlscript} | md5sum > ${sqlscript}.md5sum
			action_start $propversion upgrade "psql script" ${sqlscript} "${md5sum}"
			psql -d ${MAINDATABASE} -f ${sqlscript} --variable ON_ERROR_STOP=1 --single-transaction > ${sqlscript}.${propversion}.log 2>&1
			retcode=$?
			if [ $retcode -ne 0 ]; then
			    glog user.error "psql script ${sqlscript} failed against database [${MDB}]"
			    action_end ${propversion} "upgrade" "psql script" "${sqlscript}" "${md5sum}" f
			    exit 1
			else
			    action_end ${propversion} "upgrade" "psql script" "${sqlscript}" "${md5sum}" t
			fi
		    fi
		    if [[ $(echo ${line} | egrep -c "^superuser ") -eq 1 ]]; then
			local sqlscript=`echo ${line} | cut -d " " -f 2`
			echo "apply SQL Superuser Script ${sqlscript}"
			md5sum=`md5sum < ${sqlscript}`
			echo ${md5sum} > ${sqlscript}.md5sum
			action_start ${propversion} "upgrade" "psql superuser script" "${sqlscript}" "${md5sum}"
			psql -d ${SUPERUSERACCESS} --variable ON_ERROR_STOP=1 -f ${sqlscript} --single-transaction > ${sqlscript}.${propversion}.log 2>&1
			retcode=$?
			if [ $retcode -ne 0 ]; then
			    glog user.error "superuser script ${sqlscript} failed against database [${SUPERUSERACCESS}]"
			    action_end ${propversion} upgrade "psql script" "${sqlscript}" "${md5sum}" f
			    exit 1
			else
			    action_end ${propversion} upgrade "psql script" "${sqlscript}" "${md5sum}" t
			fi
		    fi
		    if [[ $(echo ${line} | egrep -c "^shell ") -eq 1 ]]; then
			local shellscript=`echo ${line} | cut -d " " -f 2`
			local shellarg=`echo ${line} | cut -d " " -f 3`
			cat ${shellscript} | md5sum > ${shellscript}.md5sum

			action_start ${propversion} "upgrade" "shell script" "${shellscript}" "${md5sum}"			
			MAINDATABASE=${MAINDATABASE} ./${shellscript} ${!shellarg} > ${shellscript}.${propversion}.log 2>&1
			action_end ${propversion} "upgrade" "shell script" "${shellscript}" "${md5sum}" t
		    fi
		    if [[ $(echo ${line} | egrep -c "^psqltest ") -eq 1 ]]; then
			glog user.debug "no action apropos for psqltest on upgrade"
		    fi
		    if [[ $(echo ${line} | egrep -c "^common tests ") -eq 1 ]]; then
			glog user.debug "no action apropos for common tests"
		    fi
		    glog user.debug "line of ${propversion}: ${line}"
		done < ${versioncontent}/${propversion}

		# Apply new version to it...
		version_load_end ${propversion}
		
   	    else
		glog user.debug "Upgrade not applying earlier version ${propversion}"
	    fi
	fi
    done		
    rm -f ${depfodder} ${dependencies} ${versionorder}
    rm -rf ${versioncontent} ${PGCMPWORK}
    summary upgrade
}

function mahout_initialize_schema () {
    echo "begin;  create schema if not exists \"${MAHOUTSCHEMA}\";  set search_path to \"${MAHOUTSCHEMA}\";
    create table if not exists version_log (version text primary key, install_start timestamptz default now(), install_end timestamptz);
    create table if not exists action_log (id serial primary key, action_start timestamptz default now(), action_end timestamptz, action text, version text, action_type text, action_source text, action_md5 text, result text, success boolean);
  truncate version_log;
  truncate action_log;"
}

function mahout_install () {
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT
    
    INMAHOUT=`in_mahout_home`
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "upgrade: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    # acquire configuration from mahout.conf
    read_mahout_config
    
    # check that there's no Mahout schema
    local SCHEMAQ="select count(1) from pg_catalog.pg_namespace where nspname='${MAHOUTSCHEMA}';"
    local MCOUNT=`psql -d ${MAINDATABASE} -qAt -c "${SCHEMAQ}"`
    case $MCOUNT in
	1)
	    glog user.error "Database already has Mahout schema ${MAHOUTSCHEMA}"
	    exit 1
	    ;;
	0)
	    local SETUPQ=`mktemp /tmp/mahout-install-setup.XXXXXXXXXXXXXX`
	    mahout_initialize_schema > ${SETUPQ}
	    ;;
    esac
    
    echo " insert into action_log (action_start, action_end, action, version, action_type, action_source, result, success) values (now(), now(), 'install mahout', 'MahoutInstall', 'install', 'mahout', 'initialized', 't');
  commit;" >> ${SETUPQ}

    psql -d ${MAINDATABASE} -f ${SETUPQ} > /dev/null 2>&1
    retcode=$?
    if [ $retcode -ne 0 ]; then
	glog user.error "Unable to setup mahout schema ${MAHOUTSCHEMA} in database [${MAINDATABASE}]"
	exit 1
    else
	glog user.info "Setup mahout schema ${MAHOUTSCHEMA} in database [${MAINDATABASE}]"
	rm -f ${SETUPQ}
    fi
    
    local depfodder=`mktemp /tmp/mahout-install-dependency-fodder.XXXXXXXXXXXX`
    local dependencies=`mktemp /tmp/mahout-install-dependencies.XXXXXXXXXXXX`
    local versionorder=`mktemp /tmp/mahout-install-versionorder.XXXXXXXXXXXX`
    local versioncontent=`mktemp -d /tmp/mahout-install-version-content.XXXXXXXXXXXX`
    calculate_dependencies ${depfodder} ${dependencies} ${versionorder}

    split_versions ${versioncontent}

    glog user.notice "Split versions"

    for propversion in `cat ${versionorder}`; do
	glog user.info "mahout install working on version ${propversion}"
	version_load_start ${propversion}

	while read line
	do
	    if [[ $(echo ${line} | egrep -c "^version ") -eq 1 ]]; then
		echo "no action apropos for version line"
	    fi
	    if [[ $(echo ${line} | egrep -c "^requires ") -eq 1 ]]; then
  		echo "no action apropos for requires line"
	    fi
	    if [[ $(echo ${line} | egrep -c "^ddl ") -eq 1 ]]; then
		local sqlscript=`echo ${line} | cut -d " " -f 2`
		glog user.notice "apply DDL Script ${sqlscript}"
		md5sum=`md5sum < ${sqlscript}`
		cat ${sqlscript} | md5sum > ${sqlscript}.md5sum
		action_start $propversion capture "DDL script" ${sqlscript} "${md5sum}"
		psql -d ${MAINDATABASE} --variable ON_ERROR_STOP=1 -f ${sqlscript} --single-transaction > ${sqlscript}.${propversion}.log 2>&1
		retcode=$?
		if [ $retcode -ne 0 ]; then
		    glog user.error "DDL script ${sqlscript} failed against database [${MDB}]"
		    action_end ${propversion} "capture" "DDL script" "${sqlscript}" "${md5sum}" f
		    exit 1
		else
		    action_end ${propversion} "capture" "DDL script" "${sqlscript}" "${md5sum}" t
		fi
	    fi
	    if [[ $(echo ${line} | egrep -c "^ddl-autocommit ") -eq 1 ]]; then
		local sqlscript=`echo ${line} | cut -d " " -f 2`
		glog user.notice "apply DDL-AUTOCOMMIT Script ${sqlscript}"
		md5sum=`md5sum < ${sqlscript}`
		cat ${sqlscript} | md5sum > ${sqlscript}.md5sum
		action_start $propversion capture "DDL-AUTOCOMMIT script" ${sqlscript} "${md5sum}"
		psql -d ${MAINDATABASE} --variable ON_ERROR_STOP=1 -f ${sqlscript} > ${sqlscript}.${propversion}.log 2>&1
		retcode=$?
		if [ $retcode -ne 0 ]; then
		    glog user.error "DDL-AUTOCOMMIT script ${sqlscript} failed against database [${MDB}]"
		    action_end ${propversion} "capture" "DDL-AUTOCOMMIT script" "${sqlscript}" "${md5sum}" f
		    exit 1
		else
		    action_end ${propversion} "capture" "DDL-AUTOCOMMIT script" "${sqlscript}" "${md5sum}" t
		fi
	    fi
	    if [[ $(echo ${line} | egrep -c "^dml ") -eq 1 ]]; then
		local sqlscript=`echo ${line} | cut -d " " -f 2`
		glog user.notice "apply DML Script ${sqlscript}"
		md5sum=`md5sum < ${sqlscript}`
		cat ${sqlscript} | md5sum > ${sqlscript}.md5sum
		action_start $propversion capture "DML script" ${sqlscript} "${md5sum}"
		psql -d ${MAINDATABASE} --variable ON_ERROR_STOP=1 -f ${sqlscript} --single-transaction > ${sqlscript}.${propversion}.log 2>&1
		retcode=$?
		if [ $retcode -ne 0 ]; then
		    glog user.error "DML script ${sqlscript} failed against database [${MDB}]"
		    action_end ${propversion} "capture" "DML script" "${sqlscript}" "${md5sum}" f
		    exit 1
		else
		    action_end ${propversion} "capture" "DML script" "${sqlscript}" "${md5sum}" t
		fi
	    fi
	    if [[ $(echo ${line} | egrep -c "^superuser ") -eq 1 ]]; then
		local sqlscript=`echo ${line} | cut -d " " -f 2`
		echo "apply SQL Superuser Script ${sqlscript}"
		md5sum=`md5sum < ${sqlscript}`
		echo ${md5sum} > ${sqlscript}.md5sum
		action_start ${propversion} "capture" "psql superuser script" "${sqlscript}" "${md5sum}"
		glog user.info "Superuser - ${SUPERUSERACCESS} loading script ${sqlscript}, logging to ${sqlscript}.${propversion}.log"
		psql -d ${SUPERUSERACCESS} --variable ON_ERROR_STOP=1 -f ${sqlscript} --single-transaction > ${sqlscript}.${propversion}.log 2>&1
		retcode=$?
		if [ $retcode -ne 0 ]; then
		    glog user.error "superuser script ${sqlscript} failed against database [${SUPERUSERACCESS}]"
		    action_end ${propversion} capture "psql script" "${sqlscript}" "${md5sum}" f
		    exit 1
		else
		    action_end ${propversion} capture "psql script" "${sqlscript}" "${md5sum}" t
		fi
	    fi
	    if [[ $(echo ${line} | egrep -c "^shell ") -eq 1 ]]; then
		local shellscript=`echo ${line} | cut -d " " -f 2`
		local shellarg=`echo ${line} | cut -d " " -f 3`
		cat ${shellscript} | md5sum > ${shellscript}.md5sum
		glog user.info "script - ${MAINDATABASE} loading shell script ${shellscript}, logging to ${shellscript}.${propversion}.log"
		action_start ${propversion} "capture" "shell script" "${shellscript}" "${md5sum}"
		MAINDATABASE=${MAINDATABASE} ./${shellscript} ${!shellarg} > ./${shellscript}.${propversion}.log 2>&1
		action_end ${propversion} "capture" "shell script" "${shellscript}" "${md5sum}" t
	    fi
	    if [[ $(echo ${line} | egrep -c "^psqltest ") -eq 1 ]]; then
		glog user.notice "psqltest does not run at install time"
	    fi
	    if [[ $(echo ${line} | egrep -c "^common tests") -eq 1 ]]; then
		glog user.notice "no action apropos for common tests"
	    fi
	done < ${versioncontent}/${propversion}

	# If the common tests exists, the
	if [ -e ${versioncontent}/CommonTests ]; then
	    # Now, walking though common tests
	    glog user.notice "applying common tests"
	fi

	version_load_end ${propversion}
    done
    
    rm -f ${SETUPQ} ${depfodder} ${dependencies} ${versionorder}
    rm -rf ${versioncontent}
    summary install
}

function mahout_diff () {
    # use pgcmp to compare current schema in database against what is supposed to be there
    # This might be a good way of generating expected differences...

    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT
    
    INMAHOUT=`in_mahout_home`
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "upgrade: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    # acquire configuration from mahout.conf
    read_mahout_config
    
    # check the version in the database
    DBVERSION=`get_mahout_version ${MAINDATABASE}`
    glog user.info "diff: found version: ${DBVERSION}"
    
    # Dump current schema using pgcmp-dump
    local CURRENTCMP=${PWD}/.mahout-temp/CurrentSchema.pgcmp
    dump_current_schema CurrentSchema ${CURRENTCMP} ${MAINDATABASE}

    glog user.notice "run pgcmp to examine schema for differences against version ${DBVERSION}"
    PGCMPWORK=`mktemp -d /tmp/mahout-upgrade-pgcmp-work.XXXXXXXXXXX`
    PGBINDIR=${PGBINDIR} PGCLABEL1=CurrentSchema PGCLABEL2=${DBVERSION} PGURI=${COMPARISONDATABASE} PGCOMITSCHEMAS=${MAHOUTOMITSCHEMAS} PGCMPINPUT1=${CURRENTCMP} PGCMPINPUT2=.mahout-data/${DBVERSION}.pgcmp PGCWORKDIR=${PGCMPWORK}  ${PGCMPHOME}/pgcmp
    rc=$?
    case ${rc} in
	0)
	    glog user.notice "pgcmp found exact match"
	    rm -rf ${PGCMPWORK}
	    ;;
	2)
	    glog user.error "pgcmp failed to run properly - see ${PGCMPWORK}/perform-comparison.log"
	    exit 1
	    ;;
	3)
	    glog user.error "pgcmp found differences inadequately explained - see ${PGCMPWORK}/perform-comparison.log"
	    exit 2
	    ;;
    esac
    summary diff
}

function report_on_version () {
    local VERSION=$1
    psql -d ${MAINDATABASE} -xqtA -F : -c "select install_start, install_end from \"${MAHOUTSCHEMA}\".version_log where version='${VERSION}';"
    echo ""
    glog user.notice "Steps for version ${VERSION}"
    echo ""
    psql -d ${MAINDATABASE} -xqtA -F : -c "select action_start, action_end, version, action, action_type, action_source, result, success from \"${MAHOUTSCHEMA}\".action_log where version='${VERSION}' order by action_start;"
}

function mahout_history () {
    ## List the upgrade activities performed against this database
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT
    
    INMAHOUT=`in_mahout_home`
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "upgrade: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi

    # acquire configuration from mahout.conf
    read_mahout_config

    # check the version in the database
    DBVERSION=`get_mahout_version ${MAINDATABASE}`
    glog user.info "history: Schema on version: ${DBVERSION}"
    echo ""

    # Very similar to mahout_capture, except that it doesn't write out md5sum/pgcmp output
    local depfodder=`mktemp /tmp/mahout-history-dependency-fodder.XXXXXXXXXXXX`
    local dependencies=`mktemp /tmp/mahout-history-dependencies.XXXXXXXXXXXX`
    local versionorder=`mktemp /tmp/mahout-history-version-order.XXXXXXXXXXXX`
    local versioncontent=`mktemp -d /tmp/mahout-history-version-content.XXXXXXXXXXXX`

    calculate_dependencies ${depfodder} ${dependencies} ${versionorder}
    split_versions ${versioncontent}

    futureversions=false
    for propversion in `cat ${versionorder}`; do
	glog user.notice "Examining version ${propversion}"
	if [[ $propversion == ${DBVERSION} ]]; then
	    # We have reached the point at which versions should get captured
	    futureversions=true
	    glog user.notice "Found current version ${propversion} - later versions have not been applied"
	    report_on_version "${propversion}"
	else
	    if [[ $futureversions == "true" ]]; then
		glog user.notice "version ${propversion} has not been applied"
	    else
		glog user.notice "version ${propversion} has been applied"
		report_on_version "${propversion}"
	    fi
	fi
    done

    # Clean up afterwards
    rm -rf ${depfodder} ${dependencies} ${versionorder} ${versioncontent}
}

function mahout_attach () {
    local PRODVERSION=${PARM1}
    local CMPDATA
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT

    INMAHOUT=`in_mahout_home`
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "attach: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    
    # acquire configuration from mahout.conf
    read_mahout_config
    glog user.info "Attaching version [${PRODVERSION}] changes to database MAINDATABASE=[${MAINDATABASE}]"

    # Verify that the version PRODVERSION matches against a valid
    # version, e.g. - one where there is a dump found in .mahout-data
    CMPDATA=${PWD}/.mahout-data/${PRODVERSION}.pgcmp
    if [[ -e ${CMPDATA} ]]; then
	glog user.info "Found comparison data for version - [${CMPDATA}]"
    else
	glog user.error "No comparison data found for version [${PRODVERSION}] - [${CMPDATA}]"
	exit 1
    fi
    
    # Verify that the database does NOT have Mahout installed, e.g. -
    # no Mahout schema
    query="select count(1) from pg_catalog.pg_namespace where nspname = '${MAHOUTSCHEMA}';"
    scount=`psql -d ${MAINDATABASE} -c "${query}" -qAt`
    if [[ ${scount} != 0 ]]; then
	glog user.error "attach: main database already has ${MAHOUTSCHEMA} schema - apparently already mahout-ized"
	exit 1
    fi
   
    # Most likely needs to have a pgcmp "expected differences" file to
    # indicate what differences are acceptable; need to be quite
    # strict about this!

    # run pgcmp to see differences versus the specified version
    # any unexpected differences lead to failing the install
    LABEL="production-${PRODVERSION}"
    CAPTUREFILE=${PWD}/.mahout-temp/attach-${PRODVERSION}.pgcmp
    dump_current_schema "${LABEL}" ${CAPTUREFILE} ${MAINDATABASE}

    # Now, run pgcmp against the two schemas:
    PGCMPWORK=`mktemp -d /tmp/mahout-attach-pgcmp-work.XXXXXXXXXXX`
    PGBINDIR=${PGBINDIR} PGCLABEL1="${LABEL}" PGCLABEL2=${PRODVERSION} PGURI=${COMPARISONDATABASE} PGCOMITSCHEMAS=${MAHOUTOMITSCHEMAS} PGCMPINPUT1=${CAPTUREFILE} PGCMPINPUT2=.mahout-data/${PRODVERSION}.pgcmp PGCWORKDIR=${PGCMPWORK}  ${PGCMPHOME}/pgcmp
    rc=$?
    case ${rc} in
	0)
	    glog user.notice "pgcmp found exact match"
	    rm -rf ${PGCMPWORK}
	    ;;
	2)
	    glog user.error "pgcmp failed to run properly - see ${PGCMPWORK}/perform-comparison.log"
	    exit 1
	    ;;
	3)
	    glog user.error "pgcmp found differences inadequately explained - see ${PGCMPWORK}/perform-comparison.log"
	    exit 2
	    ;;
    esac

    # But if there are no differences, then we need to add mahout
    # schema as is added by mahout install/init, and indicate
    # that it was marked as OK with the specified version
    local SETUPQ=`mktemp /tmp/mahout-attach-setup.XXXXXXXXXXXXXX`
    mahout_initialize_schema > ${SETUPQ}
    echo " insert into action_log (action_start, action_end, action, version, action_type, action_source, result, success) values (now(), now(), 'attach mahout', '${PRODVERSION}', 'attach', 'mahout', 'initialized', 't');
    insert into version_log (version, install_start, install_end) values ('${PRODVERSION}', now(), clock_timestamp());
  commit;" >> ${SETUPQ}

    psql -d ${MAINDATABASE} -f ${SETUPQ} > /dev/null 2>&1
    retcode=$?
    if [ $retcode -ne 0 ]; then
	glog user.error "Unable to setup mahout schema ${MAHOUTSCHEMA} in database [${MAINDATABASE}]"
	exit 1
    else
	glog user.notice "Setup mahout schema ${MAHOUTSCHEMA} in database [${MAINDATABASE}]"
	rm -f ${SETUPQ}
    fi
    glog user.notice "mahout attach completed for version [${PRODVERSION}] in database [${MAINDATABASE}]"
    summary attach
}

function mahout_changes () {
    echo "changes Not implemented yet"
    exit 1    
    summary changes
}

function mahout_build () {
    local BLABEL=$1
    local BTYPE=$2
    local BHOME=`mktemp -d /tmp/mahout-build-path.XXXXXXXXXXXXXXX`
    mkdir ${BHOME}/${BLABEL}
    glog user.info "mahout build generated build directory ${BHOME}/${BLABEL}"
    tar cf - . | (cd ${BHOME}/${BLABEL}; tar xf -)
    glog user.notice "mahout build copied build material to ${BHOME}/${BLABEL}"

    glog user.notice "mahout build: trimming unneeded material"
    for exclusion in .mahout-logs .mahout-temp .mahout-builds; do
	EXCLUSIONDIR=${BHOME}/${BLABEL}/${exclusion}
	if [[ -d ${EXCLUSIONDIR}  ]]; then
	    rm -rf ${EXCLUSIONDIR}
	fi
    done

    BUILDFILE=${PWD}/.mahout-builds/${BLABEL}.${BTYPE}
    
    case $BTYPE in
	tar)
	    (cd ${BHOME}; tar cf ${BUILDFILE} ${BLABEL})
	    ;;
	tar.gz)
	    (cd ${BHOME}; tar cfz ${BUILDFILE} ${BLABEL})
	    ;;
	tar.bz)
	    (cd ${BHOME}; tar cfj ${BUILDFILE} ${BLABEL})
	    ;;
	*)
	    glog user.error "Invalid build type: [${BTYPE}] - must be one of (tar, tar.gz, tar.bz)"
	    ;;
    esac
    if [[ -d ${BHOME} ]]; then
	rm -rf ${BHOME}
    fi
    glog user.notice "Build generated as ${BUILDFILE}"
    summary build
}



function mahout_attach () {
    local PRODVERSION=${PARM1}
    local CMPDATA
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT

    INMAHOUT=`in_mahout_home`
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "attach: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    
    # acquire configuration from mahout.conf
    read_mahout_config
    glog user.info "Attaching version [${PRODVERSION}] changes to database MAINDATABASE=[${MAINDATABASE}]"

    # Verify that the version PRODVERSION matches against a valid
    # version, e.g. - one where there is a dump found in .mahout-data
    CMPDATA=${PWD}/.mahout-data/${PRODVERSION}.pgcmp
    if [[ -e ${CMPDATA} ]]; then
	glog user.notice "Found comparison data for version - [${CMPDATA}]"
    else
	glog user.error "No comparison data found for version [${PRODVERSION}] - [${CMPDATA}]"
	exit 1
    fi

    # Need to rummage through the cluster to get all the Database URIs for nodes
    
    
    # Verify that every database does NOT have Mahout installed, e.g. -
    # no Mahout schema
    query="select count(1) from pg_catalog.pg_namespace where nspname = '${MAHOUTSCHEMA}';"
    scount=`psql -d ${MAINDATABASE} -c "${query}" -qAt`
    if [[ ${scount} != 0 ]]; then
	glog user.error "attach: main database already has ${MAHOUTSCHEMA} schema - apparently already mahout-ized"
	exit 1
    fi
   
    # Most likely needs to have a pgcmp "expected differences" file to
    # indicate what differences are acceptable; need to be quite
    # strict about this!

    # run pgcmp to see differences versus the specified version
    # any unexpected differences lead to failing the install
    LABEL="production-${PRODVERSION}"
    CAPTUREFILE=${PWD}/.mahout-temp/attach-${PRODVERSION}.pgcmp
    dump_current_schema "${LABEL}" ${CAPTUREFILE} ${MAINDATABASE}

    # Now, run pgcmp against the two schemas:
    PGCMPWORK=`mktemp -d /tmp/mahout-attach-pgcmp-work.XXXXXXXXXXX`
    PGBINDIR=${PGBINDIR} PGCLABEL1="${LABEL}" PGCLABEL2=${PRODVERSION} PGURI=${COMPARISONDATABASE} PGCOMITSCHEMAS=${MAHOUTOMITSCHEMAS} PGCMPINPUT1=${CAPTUREFILE} PGCMPINPUT2=.mahout-data/${PRODVERSION}.pgcmp PGCWORKDIR=${PGCMPWORK}  ${PGCMPHOME}/pgcmp
    rc=$?
    case ${rc} in
	0)
	    glog user.notice "pgcmp found exact match"
	    rm -rf ${PGCMPWORK}
	    ;;
	2)
	    glog user.error "pgcmp failed to run properly - see ${PGCMPWORK}/perform-comparison.log"
	    exit 1
	    ;;
	3)
	    glog user.error "pgcmp found differences inadequately explained - see ${PGCMPWORK}/perform-comparison.log"
	    exit 2
	    ;;
    esac

    # But if there are no differences, then we need to add mahout
    # schema as is added by mahout install/init, and indicate
    # that it was marked as OK with the specified version
    local SETUPQ=`mktemp /tmp/mahout-attach-setup.XXXXXXXXXXXXXX`
    mahout_initialize_schema > ${SETUPQ}
    echo " insert into action_log (action_start, action_end, action, version, action_type, action_source, result, success) values (now(), now(), 'attach mahout', '${PRODVERSION}', 'attach', 'mahout', 'initialized', 't');
    insert into version_log (version, install_start, install_end) values ('${PRODVERSION}', now(), clock_timestamp());
  commit;" >> ${SETUPQ}

    psql -d ${MAINDATABASE} -f ${SETUPQ} > /dev/null 2>&1
    retcode=$?
    if [ $retcode -ne 0 ]; then
	glog user.error "Unable to setup mahout schema ${MAHOUTSCHEMA} in database [${MAINDATABASE}]"
	exit 1
    else
	glog user.info "Setup mahout schema ${MAHOUTSCHEMA} in database [${MAINDATABASE}]"
	rm -f ${SETUPQ}
    fi
    glog user.notice "mahout attach completed for version [${PRODVERSION}] in database [${MAINDATABASE}]"
    summary attach
}

function mahout_slony_attach () {
    local PRODVERSION=${PARM1}
    local CMPDATA
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT

    INMAHOUT=`in_mahout_home`
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "attach: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    
    # acquire configuration from mahout.conf
    read_mahout_config
    glog user.info "Attaching version [${PRODVERSION}] changes to database MAINDATABASE=[${MAINDATABASE}]"
    # Verify that the version PRODVERSION matches against a valid
    # version, e.g. - one where there is a dump found in .mahout-data
    CMPDATA=${PWD}/.mahout-data/${PRODVERSION}.pgcmp
    if [[ -e ${CMPDATA} ]]; then
	glog user.info "Found comparison data for version - [${CMPDATA}]"
    else
	glog user.error "No comparison data found for version [${PRODVERSION}] - [${CMPDATA}]"
	exit 1
    fi

    ## Need to check ALL the nodes for this stuff...
    ## Grab the list of nodes involved with the set SLONYMAINSET, providers AND subscribers
    NODEQUERY="select sub_provider from \"_${SLONYCLUSTER}\".sl_subscribe where sub_set=${SLONYMAINSET}
           union select sub_receiver from \"_${SLONYCLUSTER}\".sl_subscribe where sub_set=${SLONYMAINSET};"
    SLONYNODES=`psql -d $MAINDATABASE -qAt -c "${NODEQUERY}" | sort -n`
    nodeprobs=false
    for slnode in `echo $SLONYNODES`; do
	# ask for connection path for that node
	SLCPATHQ="select pa_conninfo from \"_${SLONYCLUSTER}\".sl_path where pa_server=${slnode} limit 1;"
	NODEDBCONN=`psql -d $MAINDATABASE -qAt -c "${SLCPATHQ}"`
	glog user.info "Checking node [${slnode}] for Mahout hygiene at ${NODEDBCONN}"

	# Verify that the database does NOT have Mahout installed, e.g. -
	# no Mahout schema
	query="select count(1) from pg_catalog.pg_namespace where nspname = '${MAHOUTSCHEMA}';"
	scount=`psql -d "${NODEDBCONN}" -c "${query}" -qAt`
	if [[ ${scount} != 0 ]]; then
	    glog user.error "attach: database ${NODEDBCONN} already has ${MAHOUTSCHEMA} schema - apparently already mahout-ized"
	    nodeprobs=true
	fi
	
	# run pgcmp to see differences versus the specified version
	# any unexpected differences lead to failing the install
	LABEL="node-${slnode}-${PRODVERSION}"
	CAPTUREFILE=${PWD}/.mahout-temp/attach-node-${slnode}-${PRODVERSION}.pgcmp
	dump_current_schema "${LABEL}" ${CAPTUREFILE} ${NODEDBCONN}

	# Now, run pgcmp against the two schemas:
	PGCMPWORK=`mktemp -d /tmp/mahout-attach-pgcmp-work.XXXXXXXXXXX`
	PGBINDIR=${PGBINDIR} PGCLABEL1="${LABEL}" PGCLABEL2=${PRODVERSION} PGURI=${COMPARISONDATABASE} PGCOMITSCHEMAS=${MAHOUTOMITSCHEMAS} PGCMPINPUT1=${CAPTUREFILE} PGCMPINPUT2=.mahout-data/${PRODVERSION}.pgcmp PGCWORKDIR=${PGCMPWORK}  ${PGCMPHOME}/pgcmp
	rc=$?
	case ${rc} in
	    0)
		glog user.notice "pgcmp found exact match"
		rm -rf ${PGCMPWORK}
		;;
	    2)
		glog user.error "pgcmp failed to run properly - see ${PGCMPWORK}/perform-comparison.log"
		nodeprobs=true
		;;
	    3)
		glog user.error "pgcmp found differences inadequately explained - see ${PGCMPWORK}/perform-comparison.log"
		nodeprobs=true
		;;
	esac
    done
    case $nodeprobs in
	false)
	    glog user.notice "No problems found when checking replication nodes against Mahout install"
	    ;;
	true)
	    glog user.error "Problems found when checking replication nodes against Mahout install"
	    exit 1
	    ;;
	*)
	    glog user.error "invalid nodeprobs - [${nodeprobs}] - should be true/false"
	    exit 1
    esac

    #  So, hygiene is good.  No differences.  Time to add Mahout
    #  schema to all the nodes


    local SETUPQ=`mktemp /tmp/mahout-attach-setup.XXXXXXXXXXXXXX`
    mahout_initialize_schema > ${SETUPQ}
    echo " insert into action_log (action_start, action_end, action, version, action_type, action_source, result, success) values (now(), now(), 'slony attach mahout', '${PRODVERSION}', 'slony_attach', 'mahout', 'initialized', 't');
    insert into version_log (version, install_start, install_end) values ('${PRODVERSION}', now(), clock_timestamp());
  commit;" >> ${SETUPQ}

    nodeprobs=false
    for slnode in `echo $SLONYNODES`; do
	# ask for connection path for that node
	SLCPATHQ="select pa_conninfo from \"_${SLONYCLUSTER}\".sl_path where pa_server=${slnode} limit 1;"
	NODEDBCONN=`psql -d $MAINDATABASE -qAt -c "${SLCPATHQ}"`
	glog user.notice "Attach Mahout schema to node ${slnode}"

	psql -d ${NODEDBCONN} -f ${SETUPQ} > /dev/null 2>&1
	
	retcode=$?
	if [ $retcode -ne 0 ]; then
	    glog user.error "Unable to setup mahout schema ${MAHOUTSCHEMA} in database [${NODEDBCONN}] - script $SETUPQ"
	    nodeprobs=true
	else
	    glog user.notice "Setup mahout schema ${MAHOUTSCHEMA} in database [${NODEDBCONN}]"
	fi
    done
    case $nodeprobs in
	false)
	    glog user.notice "No problems attaching Mahout schema to Slony nodes"
	    rm -f ${SETUPQ}
	    ;;
	true)
	    glog user.error "Problems found when attaching Mahout schema to Slony nodes"
	    exit 1
	    ;;
	*)
	    glog user.error "invalid nodeprobs - [${nodeprobs}] - should be true/false"
	    exit 1
    esac
    glog user.notice "mahout attach completed for version [${PRODVERSION}] in database [${MAINDATABASE}]"
    summary slony_attach
}

### Applying DDL via slonik...
### Overview...
### - hygiene checks, that Mahout is in good shape
### - verify that DB node is the origin for the set
### - pull list of other nodes
### - iterate through nodes, verifying
###   - Version matches
###   - dump schema via pgcmp, verify that each node matches the mahout-provided data
###   - Get shape of cluster
###   - calculate dependencies (of dependencies in Mahout)
###   - for each version being upgraded
###     - loop through actions
###       - For DDL:
###         - get ddl requests, drop into Slonik script
###         - determine the tables to be added, generating SET ADD TABLE
###         - determine the sequences to be added, generating SET ADD SEQUENCE
###         - determine the tables to be dropped, generating SET DROP TABLE
###         - determine the sequences to be dropped, generating SET DROP SEQUENCE
###         - something up with ddl vs psql vs ddl-autocommit vs superuser
###       - for shell:
###         - run against origin node

function mahout_slonik () {
    # starts similarly to mahout_upgrade, checking hygiene
    
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT
    
    INMAHOUT=`in_mahout_home`
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "slonik: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    # acquire configuration from mahout.conf
    read_mahout_config
    # check the version in the database
    PRODVERSION=`get_mahout_version ${MAINDATABASE}`
    glog user.info "slonik: found version: ${PRODVERSION} on node [${MAINDATABASE}]"

    CMPDATA=${PWD}/.mahout-data/${PRODVERSION}.pgcmp
    if [[ -e ${CMPDATA} ]]; then
	glog user.info "Found comparison data for version - [${CMPDATA}]"
    else
	glog user.error "No comparison data found for version [${PRODVERSION}] - [${CMPDATA}]"
	exit 1
    fi

    ## Need to check ALL the nodes for this stuff...
    ## Grab the list of nodes involved with the set SLONYMAINSET, providers AND subscribers
    NODEQUERY="select sub_provider from \"_${SLONYCLUSTER}\".sl_subscribe where sub_set=${SLONYMAINSET}
           union select sub_receiver from \"_${SLONYCLUSTER}\".sl_subscribe where sub_set=${SLONYMAINSET};"
    SLONYNODES=`psql -d $MAINDATABASE -qAt -c "${NODEQUERY}" | sort -n`
    nodeprobs=false
    for slnode in `echo $SLONYNODES`; do
	# ask for connection path for that node
	SLCPATHQ="select pa_conninfo from \"_${SLONYCLUSTER}\".sl_path where pa_server=${slnode} limit 1;"
	NODEDBCONN=`psql -d $MAINDATABASE -qAt -c "${SLCPATHQ}"`
	glog user.info "Checking node [${slnode}] for Mahout hygiene at ${NODEDBCONN}"

	# Verify that the database does agrees on latest Mahout version
	versionquery="select version from \"${MAHOUTSCHEMA}\".version_log order by install_end desc limit 1;"
	nodeversion=`psql -d "${NODEDBCONN}" -c "${versionquery}" -qAt`
	rc=$?
	case ${rc} in
	    0)
		glog user.notice "node ${slnode} - [${NODEDBCONN}] has version [${nodeversion}]"
		;;
	    1)
		glog user.error "unable to get version for node ${slnode} - [${NODEDBCONN}]"
		nodeprobs=true
		;;
	    2)
		glog user.error "unable to connect to node ${slnode} - [${NODEDBCONN}]"
		nodeprobs=true
		;;
	    3)
		glog user.error "unable to query node for version - ${slnode} - [${NODEDBCONN}]"
		nodeprobs=true
		;;
	esac
        if [[ $nodeversion == $PRODVERSION ]]; then
	    glog user.notice "node $slnode has version $nodeversion matching main node"
	else
	    glog user.error "node $slnode has version $nodeversion mismatching main node with $PRODVERSION"
	    nodeprobs=true
	fi

	# run pgcmp to capture the node-specific data
	LABEL="node-${slnode}-${PRODVERSION}"
	CAPTUREFILE=${PWD}/.mahout-temp/attach-node-${slnode}-${PRODVERSION}.pgcmp
	dump_current_schema "${LABEL}" ${CAPTUREFILE} ${NODEDBCONN}

	# And run pgcmp against the two schemas
	PGCMPWORK=`mktemp -d /tmp/mahout-attach-pgcmp-work.XXXXXXXXXXX`
	PGBINDIR=${PGBINDIR} PGCLABEL1="${LABEL}" PGCLABEL2=${PRODVERSION} PGURI=${COMPARISONDATABASE} PGCOMITSCHEMAS=${MAHOUTOMITSCHEMAS} PGCMPINPUT1=${CAPTUREFILE} PGCMPINPUT2=.mahout-data/${PRODVERSION}.pgcmp PGCWORKDIR=${PGCMPWORK}  ${PGCMPHOME}/pgcmp
	rc=$?
	case ${rc} in
	    0)
		glog user.notice "pgcmp found exact match"
		rm -rf ${PGCMPWORK}
		;;
	    2)
		glog user.error "pgcmp failed to run properly - see ${PGCMPWORK}/perform-comparison.log"
		nodeprobs=true
		;;
	    3)
		glog user.error "pgcmp found differences inadequately explained - see ${PGCMPWORK}/perform-comparison.log"
		nodeprobs=true
		;;
	esac
    done
    case $nodeprobs in
	false)
	    glog user.notice "No problems found when checking replication nodes against Mahout install"
	    ;;
	true)
	    glog user.error "Problems found when checking replication nodes against Mahout install"
	    exit 1
	    ;;
	*)
	    glog user.error "invalid nodeprobs - [${nodeprobs}] - should be true/false"
	    exit 1
    esac

    # Very similar to mahout_capture, except that it doesn't write out md5sum/pgcmp output
    local depfodder=`mktemp /tmp/mahout-slonik-dependency-fodder.XXXXXXXXXXXX`
    local dependencies=`mktemp /tmp/mahout-slonik-dependencies.XXXXXXXXXXXX`
    local versionorder=`mktemp /tmp/mahout-slonik-version-order.XXXXXXXXXXXX`
    local versioncontent=`mktemp -d /tmp/mahout-slonik-version-content.XXXXXXXXXXXX`
    local slonikscript="${PWD}/.mahout-builds/slonik-from-${DBVERSION}.slonik"

    # Find the shape of the cluster...
    # SLONYCLUSTERNAME
    # SLONYNODES
    # SLONYSUBSCRIPTIONS

    # Need to add SET DROP TABLE requests to slonik scripts before tables are dropped

    calculate_dependencies ${depfodder} ${dependencies} ${versionorder}
    glog user.notice "calced dependencies"
    split_versions ${versioncontent}
    versionswanted=false
    for propversion in `cat ${versionorder}`; do
	if [[ $propversion == ${DBVERSION} ]]; then
	    # We have reached the point at which versions should get captured
	    versionswanted=true
	    glog user.notice "Capture examining versions to apply - already on ${propversion}"
	else
	    if [[ $versionswanted == "true" ]]; then
		# need to apply scripts to the database
		glog user.notice "Slonik needs to apply version ${propversion}"
		version_load_start ${propversion}
		
		glog user.notice "From script ${versioncontent}/${propversion}"
		while read line
		do
		    if [[ $(echo ${line} | egrep -c "^version ") -eq 1 ]]; then
			echo "no action apropos for version line"
		    fi
		    if [[ $(echo ${line} | egrep -c "^requires ") -eq 1 ]]; then
  		        echo "no action apropos for requires line"
		    fi
		    if [[ $(echo ${line} | egrep -c "^ddl ") -eq 1 ]]; then
			local sqlscript=`echo ${line} | cut -d " " -f 2`
			glog user.notice "apply DDL Script ${sqlscript}"
			md5sum=`md5sum < ${sqlscript}`
			cat ${sqlscript} | md5sum > ${sqlscript}.md5sum
			action_start $propversion slonik "DDL script" ${sqlscript} "${md5sum}"
			psql -d ${MAINDATABASE} -f ${sqlscript} --variable ON_ERROR_STOP=1 --single-transaction > ${sqlscript}.${propversion}.log 2>&1
			retcode=$?
			if [ $retcode -ne 0 ]; then
			    glog user.error "DDL script ${sqlscript} failed against database [${MDB}]"
			    action_end "slonik" "DDL script" "${sqlscript}" "${md5sum}" f
			    exit 1
			else
			    action_end ${propversion} "slonik" "DDL script" "${sqlscript}" "${md5sum}" t
			fi
		    fi
		    if [[ $(echo ${line} | egrep -c "^superuser ") -eq 1 ]]; then
			local sqlscript=`echo ${line} | cut -d " " -f 2`
			echo "apply SQL Superuser Script ${sqlscript}"
			md5sum=`md5sum < ${sqlscript}`
			echo ${md5sum} > ${sqlscript}.md5sum
			action_start ${propversion} "slonik" "psql superuser script" "${sqlscript}" "${md5sum}"
			psql -d ${SUPERUSERACCESS} --variable ON_ERROR_STOP=1 -f ${sqlscript} --single-transaction > ${sqlscript}.${propversion}.log 2>&1
			retcode=$?
			if [ $retcode -ne 0 ]; then
			    glog user.error "superuser script ${sqlscript} failed against database [${MDB}]"
			    action_end slonik "psql script" "${sqlscript}" "${md5sum}" f
			    exit 1
			else
			    action_end slonik "psql script" "${sqlscript}" "${md5sum}" t
			fi
		    fi
		    if [[ $(echo ${line} | egrep -c "^shell ") -eq 1 ]]; then
			local shellscript=`echo ${line} | cut -d " " -f 2`
			local shellarg=`echo ${line} | cut -d " " -f 3`
			cat ${shellscript} | md5sum > ${shellscript}.md5sum

			action_start ${propversion} "slonik" "shell script" "${shellscript}" "${md5sum}"			
			MAINDATABASE=${MAINDATABASE} ./${shellscript} ${!shellarg} > ${shellscript}.${propversion}.log 2>&1
			action_end ${propversion} "slonik" "shell script" "${shellscript}" "${md5sum}" t
		    fi
		    if [[ $(echo ${line} | egrep -c "^psqltest ") -eq 1 ]]; then
			glog user.debug "no action apropos for psqltest on slonik"
		    fi
		    if [[ $(echo ${line} | egrep -c "^common tests ") -eq 1 ]]; then
			glog user.debug "no action apropos for common tests"
		    fi
		    glog user.debug "line of ${propversion}: ${line}"
		done < ${versioncontent}/${propversion}

		# Apply new version to it...
		version_load_end ${propversion}
		
   	    else
		glog user.debug "Slonik not applying earlier version ${propversion}"
	    fi
	fi
    done		
    rm -f ${depfodder} ${dependencies} ${versionorder}
    rm -rf ${versioncontent} ${PGCMPWORK}
    
    echo "slonik Not fully implemented yet"
    exit 1    
    summary slonik
}

case $SUBCOMMAND in
    init)
	mahout_init ${PARM1}
	;;
    capture)
	mahout_capture
	;;
    attach)
	mahout_attach ${PARM1}
	;;
    check)
	mahout_check
	;;
    install)
	mahout_install
	;;
    upgrade)
	mahout_upgrade
	;;
    diff)
	mahout_diff
	;;
    slonik)
	mahout_slonik
	;;
    slony_attach)
	mahout_slony_attach ${PARM1}
	;;
    history)
	mahout_history
	;;
    changes)
	mahout_changes
	;;
    validate_control)
	validate_control
	;;
    build)
	mahout_build ${PARM1} ${PARM2}
	;;
    *)
	echo "Invalid subcommand - [${COMMAND}]"
	help
	exit 2
	;;
esac

