#!/bin/bash

SUBCOMMAND=$1
PARM1=$2
PARM2=$3

MAHOUTOMITSCHEMAS=${MAHOUTOMITSCHEMAS:-${PGCOMITSCHEMAS:-"('pg_catalog','information_schema')"}}

help () {
     echo "
mahout: a schema management tool for PostgreSQL

mahout commands:
 mahout init
    Initializes a mahout project
 mahout capture
    Captures pgcmp files to use for database schema comparisons
 mahout attach
    Attaches a particular version label to the present database schema
 mahout check
    Checks the version indicated by mahout.conf and checks the schema against
    that version using pgcmp
 mahout upgrade
    Performs an upgrade from the present version to the latest/specified version
 mahout diff
    Finds differences between the current version and what is expected
 mahout slonik
    Prepares a slonik script to install replication against the latest/specified version
 mahout history
    List mahout upgrade activities performed against the local database
 mahout versions
    Walk through configuration to get all available versions, and check
    which have been applied against the database
 mahout changes
    List mahout scripts to be applied.
    List objects that are being changed by the upgrade
"
}

DEBUGS=0
NOTICES=0
WARNINGS=0
PROBLEMS=0
MAHOUTLOG=.mahout-log

function glog () {
    local level=$1
    local notice=$2 
    logger -i -p "${level}" -t "mahout" "${notice}"
    case ${level} in
	user.debug)
	    DEBUGS=$((${DEBUGS} + 1))
  	    ;;
	*)
	    echo "${level} mahout ${notice}"
	    ;;
    esac
    if [ -d ${MAHOUTLOG} ]; then
	when=`date --rfc-3339=seconds`
	echo "${when} ${level} mahout ${notice}" >> ${MAHOUTLOG}/mahout.log
    fi
    case ${level} in
	user.notice)
	    NOTICES=$((${NOTICES} + 1))
	    ;;
	user.warning)
	    WARNINGS=$((${WARNINGS} + 1))
	    ;;
	user.error)
	    PROBLEMS=$((${PROBLEMS} + 1))
	    ;;
    esac	    
}

function mahout_init () {
    local MAHOUTHOME=$1
    local problems=0
    local MO
    local MDB
    local MSU
    local MCL
    local PGCH
    local PGCD
    local PGCC
    MDB=${MAINDATABASE:-${PGDATABASE:-"PGDATABASEUNSET"}}
    MSU=${SUPERUSERACCESS:-${PGDATABASE:-"SUPERUSERACCESSUNSET"}}
    MCL=${COMPARISONDATABASE:-${PGDATABASE:-"COMPARISONDATABASEUNSET"}}
    PGCH=${PGCMPHOME:-"/home/cbbrowne/PostgreSQL/pgcmp"}
    MHSCH=${MAHOUTSCHEMA:-"Mahout"}

    if [ -d $MAHOUTHOME ]; then
	glog user.error "Directory [${MAHOUTHOME}] already exists - aborting"
	exit 1
    else
	mkdir $MAHOUTHOME 
    fi
    
    MO=${MAHOUTHOME}/mahout.conf
    echo "mahout: setting up mahout repository in mahout directory: [${MO}]"
    echo "mahout: sample mahout.conf in ${MO}"
    echo "# Sample mahout file" > ${MO}
    echo "# MAINDATABASE: Main Database being managed by Mahout" >> ${MO}
    echo "MAINDATABASE=${MDB}" >> ${MO}
    echo "# SUPERUSERACCESS: Superuser URI for database being managed by Mahout" >> ${MO}
    echo "SUPERUSERACCESS=${MSU}" >> ${MO}
    echo "# COMPARISONDATABASE: URI for comparison database to be used for comparisons" >> ${MO}
    echo "COMPARISONDATABASE=${MCL}" >> ${MO}

    if [ "${MSU}" == "${MDB}" ]; then
	glog user.warning "Main database connection (MAINDATABASE=[${MDB}] same as Superuser connection (SUPERUSERACCESS=[${MSU}]"
    fi
    if [ "${MCL}" == "${MDB}" ]; then
	glog user.warning "Main database connection (MAINDATABASE=[${MDB}] same as Cluster connection (COMPARISONDATABASE=[${MCL}]"
    fi
    
    echo "# MAHOUTOMITSCHEMAS: set of schemas to ignore for comparisons" >> ${MO}
    echo "MAHOUTOMITSCHEMAS=${MAHOUTOMITSCHEMAS}" >> ${MO}
    echo "# PGCMPHOME: location to find pgcmp, pgcmp-dump" >> ${MO}
    echo "PGCMPHOME=${PGCH}" >> ${MO}
    echo "# MAHOUTSCHEMA: which schema to use for Mahout database objects" >> ${MO}
    echo "MAHOUTSCHEMA=${MHSCH}" >> ${MO}				      

    for pgm in pgcmp pgcmp-dump; do
	if [ -x ${PGCH}/${pgm} ]; then
	    glog user.notice "found ${PGCH}/${pgm} executable OK"
	else
	    glog user.error "did not find executable ${PGCH}/${pgm}"
	fi
    done
    echo "# Add additional configuration parameters for scripts after this" >> ${MO}

    MAHOUTLOG=${MAHOUTHOME}/.mahout-logs
    mkdir ${MAHOUTLOG}
    
    MAHOUTCAP=${MAHOUTHOME}/.mahout-data
    if [ -d ${MAHOUTCAP} ]; then
	glog user.error "Capture directory MAHOUTCAP [${MAHOUTCAP}] already exists"
	exit 1
    else
	mkdir ${MAHOUTCAP}
	glog user.notice "Setting up directory MAHOUTCAP [${MAHOUTCAP}]"
    fi
    MAHOUTTMP=${MAHOUTHOME}/.mahout-temp
    mkdir ${MAHOUTTMP}
    
    MAHOUTCTL=${MAHOUTHOME}/mahout.control
    if [ -e ${MAHOUTCTL} ]; then
	glog user.error "Control file MAHOUTCTL=[${MAHOUTCTL}] already exists"
    else
	echo "# Initialized mahout.control" > ${MAHOUTCTL}
	echo "# add sections after this to indicate versions" >> ${MAHOUTCTL}
	echo "version Base"  >> ${MAHOUTCTL}
	echo "psql Base/base-schema.sql"  >> ${MAHOUTCTL}
    fi
    case $PROBLEMS in
	0)
	    glog user.notice "mahout init complete: no serious configuration problems noticed"
	    ;;
	*)
	    glog user.notice "mahout init encountered ${PROBLEMS} serious configuration problems"
	    ;;
    esac

    mkdir $MAHOUTHOME/Base
    glog user.notice "Dumping database ${MDB} to Base/base-schema.sql"
    pg_dump -d ${MDB} -s > $MAHOUTHOME/Base/base-schema.sql
    md5sum $MAHOUTHOME/Base/base-schema.sql > $MAHOUTHOME/Base/.base-schema.sql.md5sum
    checksum=`cat $MAHOUTHOME/Base/.base-schema.sql.md5sum`
    glog user.notice "mahout: initial control file set up indicating schema from ${MDB} as schema"
    glog user.notice "mahout: base schema set up with checksum [${checksum}]"
    glog user.notice "mahout: please edit ${MO} to validate configuration parameters"

    echo "begin;  create schema if not exists \"${MHSCH}\";  set search_path to \"${MHSCH}\";
    create table if not exists changelog_lock (id serial primary key, locked boolean not null, lock_granted timestamptz, lockedby text);
    create table if not exists version_log (version text primary key, install_start timestamptz default now(), install_end timestamptz);
    create table if not exists action_log (id serial primary key, action_start timestamptz default now(), action_end timestamptz, action text, version text, action_type text, action_source text, action_md5 text, result text, success boolean);
  delete from version_log;
  delete from action_log;
  insert into version_log (version, install_start, install_end)
     select 'Base', now(), clock_timestamp();
  insert into action_log (action_start, action_end, action, version, action_type, action_source, action_md5, result, success)
  select now(), clock_timestamp(), 'Initialize Base Schema', 'Base', 'initialize', 'mahout tool', NULL::text, 'completed', 't'::boolean;
  commit; " > ${MAHOUTTMP}/setup-mahout-schema.sql

    psql -d ${MDB} -f ${MAHOUTTMP}/setup-mahout-schema.sql > /dev/null 2>&1
    retcode=$?
    if [ $retcode -ne 0 ]; then
	glog user.error "Unable to setup mahout schema in database [${MDB}]"
	exit 1
    else
	glog user.notice "Setup mahout schema in database [${MDB}]"
    fi
    
    # And capture the pgcmp output as .mahout-data/Base.pgcmp
    # Set up parms:
    # PGURI
    # PGCOMITSCHEMAS
    # PGCLABEL=Base
    glog user.notice "Dump Base schema data via pgcmp"
    BASEPGCMP=${MAHOUTHOME}/.mahout-data/Base.pgcmp
    PGCLABEL=Base PGURI=${MDB} PGCOMITSCHEMAS=${MAHOUTOMITSCHEMAS} PGCMPOUTPUT=${BASEPGCMP} ${PGCH}/pgcmp-dump > /dev/null
    rc=$?
    if [ $rc -ne 0 ]; then
	glog user.error "Failure to use pgcmp to dump base schema - rc=[${rc}]"
    else
	glog user.notice "Dumped Base schema pgcmp data to ${BASEPGCMP}"
    fi
}

function validate_control () {
    local CTL=${PWD}/mahout.control
    glog user.notice "validate_control: validating control file [${CTL}]"
    if [ -e ${CTL} ]; then
	glog user.notice "Found [${CTL}]"
	local dropcomments=`mktemp /tmp/mahout-ctl-check.sanscomments.XXXXXXXXXXX`
	local dropwhitespace=`mktemp /tmp/mahout-ctl-check.sanswhitespace.XXXXXXXXXXX`
	local badlines=`mktemp /tmp/mahout-ctl-check.badlines.XXXXXXXXXXX`
	local psqlscripts=`mktemp /tmp/mahout-ctl-check.psql.XXXXXXXXXXX`
	local shellscripts=`mktemp /tmp/mahout-ctl-check.shellscripts.XXXXXXXXXXX`
	cut -d \# -f 1 < ${CTL} > ${dropcomments}
	sed "s/^[ \t]*//" < ${dropcomments} | sed "s/[ \t]*$//" > ${dropwhitespace}
	
	egrep -n -v "^(version|psql|common tests|psqltest|requires|superuser|shell)[ ]*" ${dropwhitespace} | egrep -v "^[0-9]+:$" > ${badlines}
	NUMBAD=`cat ${badlines} | wc -l`
	if [[ ${NUMBAD} -gt 0 ]]; then
	    glog user.error "Found ${NUMBAD} ill-formatted lines"
	    cat ${badlines}
	    exit 1
	fi
	# check that psql lines refer to files that actually exist
        egrep -n "^psql " ${dropwhitespace} > ${psqlscripts}
	local line
	while read line
	do
	    lineno=`echo ${line} | cut -d : -f 1`
	    pfilename=`echo ${line} | sed 's/^[0-9]*: *psql[ \t]*//'`
	    if [ -e ${pfilename} ]; then
		glog user.notice "psql file ${pfilename} on line ${lineno} exists"
	    else
		glog user.error "psql file ${pfilename} on line ${lineno} does not exist"
	    fi
	done < ${psqlscripts}

	# check that shell lines refer to files that actually exist
        egrep -n "^shell " ${dropwhitespace} > ${shellscripts}
	local line
	while read line
	do
	    lineno=`echo ${line} | cut -d : -f 1`
	    pfilename=`echo ${line} | sed 's/^[0-9]*: *shell[ \t]*//'`
	    if [ -e ${pfilename} ]; then
		glog user.notice "shell file ${pfilename} on line ${lineno} exists"
	    else
		glog user.error "shell file ${pfilename} on line ${lineno} does not exist"
	    fi
	done < ${shellscripts}
	
	# check that all requires point to valid versions
	local vfile=`mktemp /tmp/mahout-ctl-check.versions.XXXXXXXXXXX`
	local rfile=`mktemp /tmp/mahout-ctl-check.requires.XXXXXXXXXXX`
	egrep -n "^version" ${dropwhitespace} > ${vfile}
	egrep -n "^requires" ${dropwhitespace} > ${rfile}
	
	while read line
	do
	    lineno=`echo ${line} | cut -d : -f 1`
	    required=`echo ${line} | sed 's/^[0-9]*: *requires[ \t]*//'`
	    requiredver=`egrep "^[0-9]*:version[ \t]*${required}\$" ${vfile}`
	    if [ "${requiredver}" != "" ]; then
		glog user.notice "Line ${lineno} wants version ${required}, found as ${requiredver}"
	    else
		glog user.error "Line ${lineno} wants version ${required}, not found"
	    fi
	done < ${rfile}
	
	# check that there are no loops
	# Assemble dependencies, run through tsort
	local depfodder=`mktemp /tmp/mahout-ctl-check-dependency-fodder.XXXXXXXXXXXX`
	local dependencies=`mktemp /tmp/mahout-ctl-check-dependencies.XXXXXXXXXXXX`
	egrep -n "^(version|requires)" ${dropwhitespace} > ${depfodder}
	local dversion
	local drequires
	while read line
	do
	    if [ $(echo "${line}" | egrep -c "^[0-9]+:version") -eq 1 ]; then
		dversion=`echo ${line} | cut -d : -f 2 | sed "s/^version //"`
		echo "found version: ${dversion}"
	    fi
	    if [ $(echo "${line}" | egrep -c "^[0-9]+:requires") -eq 1 ]; then
		drequires=`echo ${line} | cut -d : -f 2 | sed "s/^requires[ \t]//"`
		echo "${drequires} ${dversion}" >> ${dependencies}
		echo "found requires: ${drequires}"
	    fi
	done < ${depfodder}
	glog user.notice "Generated dependency list: ${dependencies}"
	local versionorder=`mktemp /tmp/mahout-ctl-check-versionorder.XXXXXXXXXXXX`
	tsort ${dependencies} > ${versionorder}
	retcode=$?
	if [ $retcode -ne 0 ]; then
	    glog user.error "Dependency cycle found - see [${dependencies}]"
	else
	    glog user.notice "Dependencies checked, no cycles found OK"
#	    rm ${dependencies}
	fi
	
	rm -f ${shortened} ${dropcomments} ${dropwhitespace} ${badlines} ${psqlscripts} ${badlines} ${vfile} ${rfile} ${shellscripts} ${depfodder} ${versionorder}
    else
	glog user.error "Control file [${CTL}] not found"
	exit 1
    fi
    if [ $PROBLEMS -gt 0 ]; then
	echo "Problems found - error count: ${PROBLEMS}"
	exit 1
    else
	exit 0
    fi
}

function in_mahout_home () {
    # see if we're in a Mahout directory
    local PSTART
    PSTART=${PROBLEMS}
    if [ -e mahout.control ]; then
	glog user.debug "found mahout.control"
    else
	glog user.error "mahout.control not found"
    fi
    if [ -e mahout.conf ]; then
	glog user.debug "found mahout.conf"
    else
	glog user.error "mahout.conf not found"
    fi
    if [ -d .mahout-data ]; then
	glog user.debug "found .mahout-data directory"
    else
	glog user.error ".mahout-data directory not found"
    fi
    if [ -d .mahout-logs ]; then
	glog user.debug "found .mahout-logs directory"
    else
	glog user.error ".mahout-logs directory not found"
    fi
    glog user.debug "PSTART: ${PSTART} PROBLEMS: ${PROBLEMS}"
    if [[ ${PSTART} -ne ${PROBLEMS} ]]; then
	glog user.error "mahout directory not properly set up"
	echo "1"
    else
	echo "0"
    fi	
}

function mahout_capture () {
    # check that we're in a Mahout directory
    local INMAHOUT
    INMAHOUT=`in_mahout_home`
    glog user.notice "inmahout provided ${INMAHOUT}"
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "capture: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    
    # acquire configuration from mahout.conf
    source mahout.conf
    
    # check the version in the database
    local DBVERSIONQ="select version from \"${MAHOUTSCHEMA}\".version_log order by install_end desc limit 1;"
    local DBVERSION=`psql -d ${MAINDATABASE} -qAt -c "${DBVERSIONQ}"`
    glog user.notice "capture: found version: ${DBVERSION}"

    # Use pgcmp to check that the version in the database
    # matches... Note that it should match EXACTLY; this is not a
    # production application
    local CAPTUREFILE
    CAPTUREFILE=`mktemp /tmp/mahout-capture-base.XXXXXXXXXXXX`
    PGCLABEL=capturedb PGURI=${MAINDATABASE} PGCMPOUTPUT=${CAPTUREFILE} ${PGCMPHOME}/pgcmp-dump > /dev/null
    rc=$?
    if [ $rc -ne 0 ]; then
	glog user.error "Failure to use pgcmp to dump base schema for capture DB - rc=[${rc}]"
    else
	glog user.notice "Dumped pgcmp data to ${CAPTUREFILE}"
    fi

    # we should compare against the pgcmp dump
    local VERSIONDUMP=.mahout-data/${DBVERSION}.pgcmp
    if [ -e ${VERSIONDUMP} ]; then
	glog user.notice "Found pgcmp data for version ${DBVERSION} - [${VERSIONDUMP}]"
	PGURI=${COMPAREURI} PGCMPINPUT1=${CAPTUREFILE} PGCMPINPUT2=${VERSIONDUMP} ${PGCMPHOME}/pgcmp > /dev/null 2>&1
	rc=$?
	case $rc in
	    2)
		glog user.error "Unable to run pgcmp comparison"
		;;
	    3)
		glog user.error "pgcmp ran, some items did not match between database and version ${DBVERSION}"
		;;
	    0)
		glog user.notice "pgcmp completed, all matched - rc=${rc}"
		;;
	esac
    else
	glog user.error "Failed to find pgcmp data for version ${DBVERSION} - [${VERSIONDUMP}]"
	exit 1
    fi
    
    # then, go through each version that is NOT applied (run tsort to get the sequence)
    #   apply the scripts indicated in the control file for the version
    #   capture pgcmp-dump data for the version
    # Optional version label parameter allows stopping at that version
    #  e.g. - mahout capture v3.2 would stop at v3.2

    
   
    echo "capture Not fully implemented yet"
    exit 1    
}

function mahout_check () {
    # Compares the schema to what is indicated by pgcmp
    # Also check md5 checksums on /all/ scripts
    # pgcmp can have a set of acceptable differences...
    echo "check Not implemented yet"
    exit 1    
}

## Usual activity...
#   delete from _mahout.changelog_lock;
#    insert into _mahout.changelog_lock (locked, lock_granted, locked_by) values ('true', now(), 'requesting user metadata');
#   [DO STUFF]
#   then release the lock by changing LOCKED to false, then trim

function mahout_upgrade () {
    # Very similar to mahout_capture, except that it doesn't write out md5sum/pgcmp output
    echo "upgrade Not implemented yet"
    exit 1    
}

function mahout_diff () {
    # use pgcmp to compare current schema in database against what is supposed to be there
    # This might be a good way of generating expected differences...
    echo "diff Not implemented yet"
    exit 1    
}

function mahout_slonik () {
    echo "slonik Not implemented yet"
    exit 1    
}

function mahout_history () {
    echo "versions Not implemented yet"
    exit 1    
}

function mahout_versions () {
    echo "versions Not implemented yet"
    exit 1    
}

function mahout_changes () {
    echo "changes Not implemented yet"
    exit 1    
}

function mahout_slonik () {
    echo "slonik Not implemented yet"
    exit 1    
}


case $SUBCOMMAND in
   init)
       mahout_init ${PARM1} ${PARM2}
       ;;
   capture)
       mahout_capture
       ;;
   attach)
       mahout_attach
       ;;
   check)
       mahout_check
       ;;
   upgrade)
       mahout_upgrade
       ;;
   diff)
       mahout_diff
       ;;
   slonik)
       mahout_slonik
       ;;
   history)
       mahout_history
       ;;
   versions)
       mahout_versions
       ;;
   changes)
       mahout_changes
       ;;
   validate_control)
       validate_control
       ;;
   *)
       echo "Invalid subcommand - [${COMMAND}]"
       help
       exit 2
       ;;
esac
