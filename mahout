#!/bin/bash

SUBCOMMAND=$1
PARM1=$2
PARM2=$3

MAHOUTOMITSCHEMAS=${MAHOUTOMITSCHEMAS:-${PGCOMITSCHEMAS:-"('${MAHOUTSCHEMA}')"}}
PGBINDIR=${PGBINDIR:-"/var/lib/postgresql/dbs/postgresql-HEAD/bin"}
MAHOUTCONFIG=${MAHOUTCONFIG:-"mahout.conf"}

help () {
    echo "
mahout: a schema management tool for PostgreSQL

mahout commands:
 mahout init [PROJECTNAME]
    Initializes a mahout project
 mahout capture
    Captures pgcmp files to use for database schema comparisons
 mahout attach [VERSION]
    Initializes the present non-mahoutized database schema to the specified
    version.  Fail if the schema does not match that version.
 mahout install [VERSION]
    Installs a mahout-managed schema in a blank database.
    With the optional version, it will stop installing at the specified version.
 mahout check
    Checks the version indicated by mahout.conf/MAHOUTCONFIG and checks the 
    schema against that version using pgcmp
 mahout upgrade
    Performs an upgrade from the present version to the latest version
 mahout diff
    Finds differences between the current version and what is expected
 mahout history
    List mahout upgrade activities performed against the local database
 mahout changes
    List mahout scripts to be applied.
    List objects that are being changed by the upgrade
 mahout build [BUILDNAME] [FORMAT]
    Generates a build in specified format, one of (tar, tar.gz, tar.bz)
 mahout slony_attach [VERSION]
    Initializes the present non-mahoutized database schemas for Slony cluster
    to the specified version.  Fail if any of the schemas does not match
    that version.
 mahout slonik
    Prepares a slonik script to upgrade replicated cluster to the latest/specified version.
 validate_control
    Runs validation tests on the mahout.control file
"
}

DEBUGS=0
NOTICES=0
WARNINGS=0
PROBLEMS=0
MAHOUTLOG=.mahout-log

function glog () {
    local level=$1
    local notice=$2
    local ccode
    local creset
    creset='\e[0m'
    logger -i -p "${level}" -t "mahout ${SUBCOMMAND}" "${notice}"
    if [ -d ${MAHOUTLOG} ]; then
	when=$(date --rfc-3339=seconds)
	echo "${when} ${level} mahout ${notice}" >> ${MAHOUTLOG}/mahout.log
    fi
    case ${level} in
	user.info)
	    ccode='\e[37m'
	    CONFIG=$((${CONFIG} + 1))
	    ;;
	user.notice)
	    ccode='\e[32m'
	    NOTICES=$((${NOTICES} + 1))
	    ;;
	user.warning)
	    ccode='\e[33m'
	    WARNINGS=$((${WARNINGS} + 1))
	    ;;
	user.error)
	    ccode='\e[31m'
	    PROBLEMS=$((${PROBLEMS} + 1))
	    ;;
	user.command)
	    ccode='\e[35m'
    esac	    
    case ${level} in
	user.debug)
	    DEBUGS=$((${DEBUGS} + 1))
  	    ;;
	*)
	    echo -e "${ccode}${level} mahout ${notice}${creset}"
	    ;;
    esac
}

function summary () {
    local STEP=$1
    glog user.notice "mahout ${STEP} complete with ${NOTICES} notices, ${WARNINGS} warnings, ${PROBLEMS} errors"
}

function read_mahout_config () {
    if [[ "x${MAHOUTCONFIG}" == "x" ]]; then
	glog user.info "mahout ${SUBCOMMAND} loading config from mahout.conf"
	source mahout.conf
    else
	### See if MAHOUTCONFIG exists, and is a file
	if [[ -f ${MAHOUTCONFIG} ]]; then
	    glog user.info "mahout ${SUBCOMMAND} loading config from [${MAHOUTCONFIG}]"
	    source ${MAHOUTCONFIG}
	else
	    glog user.error "mahout ${SUBCOMMAND} cannot load config from [${MAHOUTCONFIG}]"
	    exit 1
	fi
    fi
}

function mahout_pgcmp () {
    local IFILE1=$1
    local IFILE2=$2
    local LABEL1=$3
    local LABEL2=$4
    local IGNORESLONY=$5

    case $MAHOUTOMITPG in
	true)
	    glog user.info "mahout_pgcmp MAHOUTOMITPG is true; not doing pgcmp"
	    ;;
	*)
	    PGBINDIR=$PGBINDIR PGURI=$COMPARISONDATABASE PGCMPINPUT1=$IFILE1 PGCMPINPUT2=$IFILE2 PGURI=$COMPARISONDATABASE PGCMPIGNORESLONYTRIGGERS=$IGNORESLONY PGCLABEL1=$LABEL1 PGCLABEL2=$LABEL2 PGCOMITSCHEMAS=${MAHOUTOMITSCHEMAS} ${PGCMPHOME}/pgcmp
	    rc=$?
	    case $rc in
		2)
		    glog user.error "Unable to run pgcmp comparison"
		    exit 1
		    ;;
		3)
		    glog user.error "pgcmp ran, some items did not match between database and version ${DBVERSION}"
		    exit 1
		    ;;
		0)
		    glog user.notice "pgcmp completed, all matched - rc=${rc}"
		    ;;
	    esac
	    ;;
    esac
    
}
function mahout_pgcmp_nodeprobs () {
    local IFILE1=$1
    local IFILE2=$2
    local LABEL1=$3
    local LABEL2=$4
    local IGNORESLONY=$5

    case $MAHOUTOMITPG in
	true)
	    glog user.info "mahout_pgcmp_nodeprobs MAHOUTOMITPG is true; not doing pgcmp"
	    ;;
	*)
	    PGBINDIR=$PGBINDIR PGURI=$COMPARISONDATABASE PGCMPINPUT1=$IFILE1 PGCMPINPUT2=$IFILE2 PGCLABEL1=$LABEL1 PGCLABEL2=$LABEL2 PGCOMITSCHEMAS=${MAHOUTOMITSCHEMAS} PGCMPIGNORESLONYTRIGGERS=$IGNORESLONY ${PGCMPHOME}/pgcmp
	    rc=$?
	    case $rc in
		2)
		    glog user.error "Unable to run pgcmp comparison"
		    nodeprobs=true
		    ;;
		3)
		    glog user.error "pgcmp ran, some items did not match between database and version ${DBVERSION}"
		    nodeprobs=true
		    ;;
		0)
		    glog user.notice "pgcmp completed, all matched - rc=${rc}"
		    ;;
	    esac
	    ;;
    esac
}

function mahout_init () {
    local MAHOUTHOME=${PWD}/$1
    local problems=0
    local MO
    local MDB
    local MSU
    local MCL
    local PGCH
    local PGCD
    local PGCC
    MDB=${MAINDATABASE:-${PGDATABASE:-"PGDATABASEUNSET"}}
    MSU=${SUPERUSERACCESS:-${PGDATABASE:-"SUPERUSERACCESSUNSET"}}
    MCL=${COMPARISONDATABASE:-${PGDATABASE:-"COMPARISONDATABASEUNSET"}}
    PGCH=${PGCMPHOME:-"/home/cbbrowne/PostgreSQL/pgcmp"}
    MHSCH=${MAHOUTSCHEMA:-"Mahout"}
    MPGBINDIR=${PGBINDIR:-"/var/lib/postgresql/dbs/postgresql-HEAD/bin"}
    glog user.info "Mahout schema: [${MHSCH}]"
    glog user.info "Superuser access: ${SUPERUSERACCESS}"

    if [ -d $MAHOUTHOME ]; then
	glog user.error "Directory [${MAHOUTHOME}] already exists - aborting"
	exit 1
    else
	mkdir $MAHOUTHOME 
    fi
    
    MO=${MAHOUTHOME}/mahout.conf
    echo "mahout: setting up mahout repository in mahout directory: [${MO}]"
    echo "mahout: sample mahout.conf in ${MO}"
    echo "# Sample mahout file" > ${MO}
    echo "# MAINDATABASE: Main Database being managed by Mahout" >> ${MO}
    echo "MAINDATABASE=${MDB}" >> ${MO}
    echo "# SUPERUSERACCESS: Superuser URI for database being managed by Mahout" >> ${MO}
    echo "SUPERUSERACCESS=${MSU}" >> ${MO}
    echo "# COMPARISONDATABASE: URI for comparison database to be used for comparisons" >> ${MO}
    echo "COMPARISONDATABASE=${MCL}" >> ${MO}
    echo "# MAHOUTNODETYPE: dev/prod" >> ${MO}
    echo "MAHOUTNODETYPE=dev" >> ${MO}

    GITIGNORE=${MAHOUTHOME}/.gitignore
    echo "# Default git ignores" > ${GITIGNORE}
    echo ".mahout-data" >> ${GITIGNORE}
    echo ".mahout-logs" >> ${GITIGNORE}
    echo ".mahout-temp" >> ${GITIGNORE}
    echo ".mahout-builds" >> ${GITIGNORE}
    echo "*.md5sum" >> ${GITIGNORE}
    echo "*.locks-acquired" >> ${GITIGNORE}
    echo "*.log" >> ${GITIGNORE}

    if [ "${MCL}" == "${MDB}" ]; then
	glog user.warning "Main database connection (MAINDATABASE=[${MDB}] same as Comparison connection (COMPARISONDATABASE=[${MCL}]"
    fi
    
    echo "# MAHOUTOMITSCHEMAS: set of schemas to ignore for comparisons" >> ${MO}
    echo "MAHOUTOMITSCHEMAS=\"${MAHOUTOMITSCHEMAS}\"" >> ${MO}
    echo "# PGCMPHOME: location to find pgcmp, pgcmp-dump" >> ${MO}
    echo "PGCMPHOME=${PGCH}" >> ${MO}
    echo "# MAHOUTSCHEMA: which schema to use for Mahout database objects" >> ${MO}
    echo "MAHOUTSCHEMA=${MHSCH}" >> ${MO}				      
    echo "PGBINDIR=${PGBINDIR:-\"${MPGBINDIR}\"}" >> ${MO}

    for pgm in pgcmp pgcmp-dump; do
	if [ -x ${PGCH}/${pgm} ]; then
	    glog user.notice "found ${PGCH}/${pgm} executable OK"
	else
	    glog user.error "did not find executable ${PGCH}/${pgm}"
	fi
    done
    echo "# Add additional configuration parameters for scripts after this" >> ${MO}

    for sd in logs data temp builds; do
	dir=${MAHOUTHOME}/.mahout-${sd}
	if [ -d $dir ]; then
	    glog user.debug "Directory [${dir}] already exists"
	else
	    glog user.warning "creating missing Mahout directory [${dir}]"
	    mkdir -p $dir
	fi
    done
	
    MAHOUTLOG=${MAHOUTHOME}/.mahout-logs
    MAHOUTCAP=${MAHOUTHOME}/.mahout-data
    MAHOUTTMP=${MAHOUTHOME}/.mahout-temp
    MAHOUTBLD=${MAHOUTHOME}/.mahout-builds
    MAHOUTCTL=${MAHOUTHOME}/mahout.control
    if [ -e ${MAHOUTCTL} ]; then
	glog user.error "Control file MAHOUTCTL=[${MAHOUTCTL}] already exists"
    else
	echo "# Initialized mahout.control" > ${MAHOUTCTL}
	echo "# add sections after this to indicate versions" >> ${MAHOUTCTL}
	echo "version Base"  >> ${MAHOUTCTL}
	echo "ddl Base/base-schema.sql"  >> ${MAHOUTCTL}
    fi
    case $PROBLEMS in
	0)
	    glog user.notice "mahout init complete: no serious configuration problems noticed"
	    ;;
	*)
	    glog user.warning "mahout init encountered ${PROBLEMS} serious configuration problems"
	    ;;
    esac

    mkdir $MAHOUTHOME/Base
    local BASESCHEMA=$MAHOUTHOME/Base/base-schema.sql
    case $MAHOUTOMITPG in
	true)
	    glog user.info "MAHOUTOMITPG true; create empty schema"
	    echo "-- Empty schema" > $BASESCHEMA
	    ;;
	*)
	    glog user.info "Dumping database ${MDB} to ${BASESCHEMA}"
	    $PGBINDIR/pg_dump -d ${MDB} -s > ${BASESCHEMA}
	    ;;
    esac
    cat $BASESCHEMA | md5sum > ${BASESCHEMA}.md5sum
    checksum=$(cat $MAHOUTHOME/Base/base-schema.sql.md5sum)
    glog user.info "mahout: initial control file set up indicating schema from ${MDB} as schema"
    glog user.info "mahout: base schema set up with checksum [${checksum}]"
    glog user.info "mahout: please edit ${MO} to validate configuration parameters"

    echo "begin;  create schema if not exists \"${MHSCH}\";  set search_path to \"${MHSCH}\";
    create table if not exists version_log (version text primary key, install_start timestamptz default clock_timestamp(), install_end timestamptz, status text, version_seq serial);
    create table if not exists action_log (action_start timestamptz default clock_timestamp(), action_end timestamptz, action text, version text, action_type text, action_source text, action_md5 text, result text, success boolean, action_seq serial primary key);
  delete from version_log;
  delete from action_log;
  insert into version_log (version, install_start, install_end, status)
     select 'Base', clock_timestamp(), clock_timestamp(), 'initial';
  insert into action_log (action_start, action_end, action, version, action_type, action_source, action_md5, result, success)
  select now(), clock_timestamp(), 'Initialize Base Schema', 'Base', 'initialize', 'mahout tool', '${checksum}', 'completed', 't'::boolean;
  commit; " > ${MAHOUTTMP}/setup-mahout-schema.sql

    case $MAHOUTOMITPG in
	true)
	    glog user.info "MAHOUTOMITPG is true; not setting up mahout schema"
	    ;;
	*)
	    $PGBINDIR/psql -d ${MDB} -f ${MAHOUTTMP}/setup-mahout-schema.sql > ${MAHOUTTMP}/setup-mahout-schema.log 2>&1
	    retcode=$?
	    if [ $retcode -ne 0 ]; then
		glog user.error "Unable to setup mahout schema in database [${MDB}]"
		exit 1
	    else
		glog user.info "Setup mahout schema in database [${MDB}]"
	    fi
	    ;;
    esac
    
    # And capture the pgcmp output as .mahout-data/Base.pgcmp
    (cd ${MAHOUTHOME}; MAHOUTOMITSCHEMAS="${MAHOUTOMITSCHEMAS}" pgcmp_dump_current Base ${MAHOUTHOME}/.mahout-data/Base.pgcmp $MDB)
    summary init
}

function split_versions () {
    local versioncontentdir=$1
    local sanswhitecomments
    local cversion

    sanswhitecomments=$PWD/.mahout-temp/mahout-unsplit-versions
    cut -d \# -f 1 < mahout.control | \
	sed "s/^[ \t]*//" | \
	sed "s/[ \t]*$//" | \
	sed "s/[\t]/ /g" | \
	sed "s/  / /g"           > ${sanswhitecomments}
    
    cversion="InvalidUntilVersionEstablished"

    while read line
    do
	# if we get a new version, then change version files
	if [[ $(echo ${line} | egrep -c "^version ") -eq 1 ]]; then
	    cversion=$(echo $line | cut -d " " -f 2)
	fi
	if [[ $(echo ${line} | egrep -c "^common tests") -eq 1 ]]; then
	    cversion=CommonTests
	fi
	
	case ${cversion} in
	    InvalidUntilVersionEstablished)
		echo "line preceding first version" > /dev/null
		;;
	    *)
		echo ${line} >> ${versioncontentdir}/${cversion}
		;;
	esac
    done < ${sanswhitecomments}
}


# Generate version ordering
function calculate_dependencies () {
    local depfodder=$1
    local dependencies=$2
    local versionorder=$3
    glog user.debug "calculate_dependencies (${depfodder},${dependencies},${versionorder})"
    
    local dropcomments=$PWD/.mahout-temp/mahout-version-ordering.sanscomments
    local dropwhitespace=$PWD/.mahout-temp/mahout-version-ordering.sanswhitespace
    cut -d \# -f 1 < mahout.control > ${dropcomments}
    sed "s/^[ \t]*//" < ${dropcomments} | sed "s/[ \t]*$//" > ${dropwhitespace}
    
    egrep -n "^(version|requires)" ${dropwhitespace} > ${depfodder}
    local dversion
    local drequires

    echo "Base Base" > ${dependencies}
    while read line
    do
	if [ $(echo "${line}" | egrep -c "^[0-9]+:version") -eq 1 ]; then
	    dversion=$(echo ${line} | cut -d : -f 2 | sed "s/^version //")
	fi
	if [ $(echo "${line}" | egrep -c "^[0-9]+:requires") -eq 1 ]; then
	    drequires=$(echo ${line} | cut -d : -f 2 | sed "s/^requires[ \t]//")
	    echo "${drequires} ${dversion}" >> ${dependencies}
	fi
    done < ${depfodder}
    glog user.info "Generated dependency list: ${dependencies}"
    tsort ${dependencies} > ${versionorder}
    retcode=$?
    if [ $retcode -ne 0 ]; then
	glog user.error "Dependency cycle found - see [${dependencies}]"
    else
	glog user.notice "Dependencies checked, no cycles found OK"
    fi
    rm -f ${dropcomments} ${dropwhitespace}
}

function validate_control () {
    local CTL=${PWD}/mahout.control
    glog user.info "validate_control: validating control file [${CTL}]"
    if [ -e ${CTL} ]; then
	glog user.info "Found [${CTL}]"
	local dropcomments=$PWD/.mahout-temp/mahout-ctl-check.sanscomments
	local dropwhitespace=$PWD/.mahout-temp/mahout-ctl-check.sanswhitespace
	local badlines=$PWD/.mahout-temp/mahout-ctl-check.badlines
	local psqlscripts=$PWD/.mahout-temp/mahout-ctl-check.psql
	local unixcommands=$PWD/.mahout-temp/mahout-ctl-check.unixcommands
	cut -d \# -f 1 < ${CTL} > ${dropcomments}
	sed "s/^[ \t]*//" < ${dropcomments} | sed "s/[ \t]*$//" | sed "s/  / /g" > ${dropwhitespace}
	
	egrep -n -v "^(version|ddl|dml|common tests|psqltest|requires|unix)[ ]*" ${dropwhitespace} | egrep -v "^[0-9]+:$" > ${badlines}
	NUMBAD=$(cat ${badlines} | wc -l)
	if [[ ${NUMBAD} -gt 0 ]]; then
	    glog user.error "Found ${NUMBAD} ill-formatted lines"
	    cat ${badlines}
	    exit 1
	fi
	# check that psql lines refer to files that actually exist
        egrep -n "^ddl " ${dropwhitespace} > ${psqlscripts}
	local line
	while read line
	do
	    lineno=$(echo ${line} | cut -d : -f 1)
	    pfilename=$(echo ${line} | sed 's/^[0-9]*: *ddl[ \t]*//')
	    if [ -e ${pfilename} ]; then
		glog user.notice "DDL file ${pfilename} on line ${lineno} exists"
	    else
		glog user.error "DDL file ${pfilename} on line ${lineno} does not exist"
	    fi
	done < ${psqlscripts}

	# check that unix lines refer to files that actually exist
	egrep -n "^unix " ${dropwhitespace} > ${unixcommands}
	local unixdata
	local unixfile
	local unixparm
	local line
	while read line
	do
	    lineno=$(echo ${line} | cut -d : -f 1)
	    unixdata=$(echo ${line} | sed 's/^[0-9]*: *unix[ \t]*//')
	    unixfile=$(echo $unixdata | cut -d " " -f 1)
	    unixparm=$(echo $unixdata | cut -d " " -f 2)
	    if [ -e ${unixfile} ]; then
		if [ -x ${unixfile} ]; then
		    glog user.notice "unix file ${unixfile} on line ${lineno} exists, executable"
		else
		    glog user.error "unix file ${unixfile} on line ${lineno} exists, NOT executable"
		fi
	    else
		glog user.error "unix file ${unixfile} on line ${lineno} does not exist"
	    fi
	done < ${unixcommands}
	
	# check that all requires point to valid versions
	local vfile=$PWD/.mahout-temp/mahout-ctl-check.versions
	local rfile=$PWD/.mahout-temp/mahout-ctl-check.requires
	egrep -n "^version" ${dropwhitespace} > ${vfile}
	egrep -n "^requires" ${dropwhitespace} > ${rfile}
	
	while read line
	do
	    lineno=$(echo ${line} | cut -d : -f 1)
	    required=$(echo ${line} | sed 's/^[0-9]*: *requires[ \t]*//')
	    requiredver=$(egrep "^[0-9]*:version[ \t]*${required}\$" ${vfile})
	    if [ "${requiredver}" != "" ]; then
		glog user.debug "Line ${lineno} expects prerequisite ${required}, found ${requiredver}"
	    else
		glog user.error "Line ${lineno} wants version ${required}, not found"
	    fi
	done < ${rfile}
	
	# check that there are no loops
	# Assemble dependencies, run through tsort
	local depfodder=$PWD/.mahout-temp/mahout-ctl-check-dependency-fodder
	local dependencies=$PWD/.mahout-temp/mahout-ctl-check-dependencies
	local versionorder=$PWD/.mahout-temp/mahout-ctl-check-versionorder
	calculate_dependencies ${depfodder} ${dependencies} ${versionorder}
	
	# check that there isn't a mix of DDL/DML/unix in the same version
	glog user.info "Check for mix of actions within a version"
	
	cversion=""
	lineno=0
	gotddl=0
	gotdml=0
	gotddlp=0
	gotunix=0
	while read line
	do
	    lineno=$(( $lineno + 1 ))
	    directive=$(echo $line | cut -d ' ' -f 1)
	    case $directive in
		version|common)
		    gottotal=$(( $gotddl + $gotdml + $gotddlp + $gotunix ))
		    if [ $gottotal -gt 1 ]; then
			glog user.error "version $cversion has multiple processing types"
			glog user.error "ddl: ${gotddl} dml: ${gotddl} ddlp: ${gotddlp} unix: ${gotunix}"
		    fi
		    gotddl=0
		    gotdml=0
		    gotunix=0
		    cversion=$(echo $line | cut -d ' ' -f 2)
		    ;;
		ddl)
		    gotddl=1
		    ;;
		dml)
		    gotdml=1
		    ;;
		unix)
		    gotunix=1
		    ;;
	    esac
	done < ${dropwhitespace}
	# And check the end...
	gottotal=$(( $gotddl + $gotdml + $gotunix ))
	if [ $gottotal -gt 1 ]; then
	    glog user.error "version $cversion has multiple processing types"
	    PROBLEMS=$((${PROBLEMS} + 1))
	    exit 1
	else
	    glog user.notice "No mixing of actions within a version OK"
	fi
	
	rm -f ${shortened} ${dropcomments} ${dropwhitespace} ${badlines} ${psqlscripts} ${badlines} ${vfile} ${rfile} ${unixcommands}  ${versionorder} ${depfodder}
    else
	glog user.error "Control file [${CTL}] not found"
	exit 1
    fi
    if [ $PROBLEMS -gt 0 ]; then
	echo "Problems found - error count: ${PROBLEMS}"
	exit 1
    else
	exit 0
    fi
}

function in_mahout_home () {
    # see if we're in a Mahout directory
    local PSTART
    PSTART=${PROBLEMS}
    for file in mahout.control mahout.conf; do
	if [ -e $file ]; then
	    glog user.debug "found mandatory Mahout configuration file $file"
	else
	    glog user.error "failed to find necessary Mahout configuration file $file"
	fi
    done
    for mdir in .mahout-data; do
	if [ -d $dir ]; then
	    glog user.debug "found ${dir} directory"
	else
	    glog user.error "Mandatory ${dir} directory not found - ERROR"
	fi
    done
    for dir in .mahout-logs .mahout-temp; do
	if [ -d $dir ]; then
	    glog user.debug "found ${dir} directory"
	else
	    glog user.debug "${dir} directory not found, creating it"
	    mkdir $dir
	fi
    done
    glog user.debug "PSTART: ${PSTART} PROBLEMS: ${PROBLEMS}"
    if [[ ${PSTART} -ne ${PROBLEMS} ]]; then
	glog user.error "mahout directory not properly set up"
	echo "1"
    else
	echo "0"
    fi	
}

function get_mahout_version () {
    local DBURI=$1
    local DBVERSIONQ="select version from \"${MAHOUTSCHEMA}\".version_log where status not in ('invalid', 'broken') order by install_end desc limit 1;"
    local DBVERSION=$($PGBINDIR/psql -d ${DBURI} -qAt -c "${DBVERSIONQ}")
    rc=$?
    if [ $rc != 0 ]; then
	glog user.error "get_mahout_version - query for version failed - rc=[${rc}] for [${DBVERSIONQ}]"
	exit 1
    else
	echo ${DBVERSION}
    fi
}

function version_load_start () {
    local version=$1
    $PGBINDIR/psql -d ${MAINDATABASE} -c "insert into \"${MAHOUTSCHEMA}\".version_log (version, install_start) values ('${version}', clock_timestamp());"  > /dev/null 2>&1
    local retcode=$?
    if [ $retcode -ne 0 ]; then
	glog user.error "Unable to set up version log for version [${version}] against database [${MAINDATABASE}]"
	exit 1
    else
	glog user.info "Begin load of version [${version}] to database [${MAINDATABASE}]"
    fi
}

function version_load_end () {
    local version=$1
    local status=$2
    $PGBINDIR/psql -d ${MAINDATABASE} -c "update \"${MAHOUTSCHEMA}\".version_log set install_end = clock_timestamp(), status='${status}' where version = '${version}';"  > /dev/null 2>&1

    local retcode=$?
    if [ $retcode -ne 0 ]; then
	glog user.error "Unable to complete version logging for version [${version}] against database [${MAINDATABASE}]"
	exit 1
    else
	glog user.notice "Complete load of version [${version}] to database [${MAINDATABASE}]"
    fi
}

function action_start () {
    local version=$1
    local action=$2
    local actiontype=$3
    local actionsource=$4
    local amd5=$5
    case $MAHOUTOMITPG in
	true)
	    glog user.info "MAHOUTOMITPG is true; not setting up mahout schema"
	    ;;
	*)
	    local asquery="insert into \"${MAHOUTSCHEMA}\".action_log (version, action_start, action, action_type, action_source, action_md5) values ('${version}', clock_timestamp(), '${action}', '${actiontype}', '${actionsource}', '${amd5}');"

	    $PGBINDIR/psql -d ${MAINDATABASE} -c "${asquery}" > /dev/null 2>&1

	    local retcode=$?
	    if [ $retcode -ne 0 ]; then
		glog user.error "Unable to record action logging for version [${version}]/source[${actionsource}]/md5sum[${amd5}] against database [${MAINDATABASE}]"
		exit 1
	    else
		glog user.debug "Recorded action logging for version [${version}]/source[${actionsource}]/md5sum[${amd5}] against database [${MAINDATABASE}]"
	    fi
	    ;;
    esac
}

function action_end () {
    local version=$1
    local action=$2
    local actiontype=$3
    local actionsource=$4
    local amd5=$5
    local success=$6
    
    local asquery="update \"${MAHOUTSCHEMA}\".action_log set result = 'completed', success='${success}', action_end=clock_timestamp() where version='${version}' and action='${action}' and action_type='${actiontype}' and action_source='${actionsource}' and action_md5 = '${amd5}' and action_end is null;"

    case $MAHOUTOMITPG in
	true)
	    glog user.info "MAHOUTOMITPG is true; not setting up mahout schema"
	    ;;
	*)
	    $PGBINDIR/psql -d ${MAINDATABASE} -c "${asquery}"  > /dev/null 2>&1

	    local retcode=$?
	    if [ $retcode -ne 0 ]; then
		glog user.error "Unable to complete action logging for version [${version}]/action[${action}]/actiontype[${actiontype}]/source[${actionsource}]/md5sum[${amd5}] against database [${MAINDATABASE}]"
		exit 1
	    else
		glog user.debug "Completed action logging for version [${version}]/source[${asource}]/md5sum[${amd5}] against database [${MAINDATABASE}]"
	    fi
	    ;;
    esac
}

# Dump current schema so that we can check that it is a good match
function pgcmp_dump_current () {
    local LABEL=$1
    local TARGET=$2
    local DATABASE=$3

    case $MAHOUTOMITPG in
	true)
	    glog user.info "pgcmp_dump_current MAHOUTOMITPG is true; not dumping pgcmp data"
	    ;;
	*)
	    glog user.info "Dump [${LABEL}] schema data for database [${DATABASE}] via pgcmp-dump into ${TARGET}"
	    # Dump current schema using pgcmp-dump
	    PGBINDIR=${PGBINDIR} PGCLABEL=${LABEL} PGURI=${DATABASE} PGCOMITSCHEMAS=${MAHOUTOMITSCHEMAS} PGCMPOUTPUT=${TARGET} ${PGCMPHOME}/pgcmp-dump > /dev/null
	    rc=$?
	    if [ $rc -ne 0 ]; then
		glog user.error "Failure to use pgcmp to dump schema metadata for label [${LABEL}] - rc=[${rc}]"
		glog user.error "Using data: PGBINDIR=${PGBINDIR} PGCLABEL=${LABEL} PGURI=${DATABASE} PGCOMITSCHEMAS=${MAHOUTOMITSCHEMAS} PGCMPOUTPUT=${TARGET} ${PGCMPHOME}/pgcmp-dump > /dev/null"
		exit 1
	    else
		glog user.notice "Dumped schema pgcmp for database [${DATABASE}] data label [${LABEL}] to ${TARGET}"
	    fi
	    ;;
    esac
}

function mahout_capture () {
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT
    
    INMAHOUT=$(in_mahout_home)
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "capture: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    
    # acquire configuration from mahout.conf
    read_mahout_config
    glog user.info "Applying changes based on MAHOUTCONFIG=[${MAHOUTCONFIG}] to database MAINDATABASE=[${MAINDATABASE}]"

    # check the version in the database
    local DBVERSION=$(get_mahout_version "${MAINDATABASE}")
    glog user.info "capture: found version: ${DBVERSION}"

    # ensure directories are present
    for sd in logs data temp builds; do
	dir=${PWD}/.mahout-${sd}
	if [ -d $dir ]; then
	    glog user.debug "Directory [${dir}] already exists"
	else
	    glog user.warning "creating missing Mahout directory [${dir}]"
	    mkdir -p $dir
	fi
    done

    # Use pgcmp to check that the version in the database
    # matches... Note that it should match EXACTLY; this is not a
    # production application
    CAPTUREFILE=${PWD}/.mahout-temp/capturedb.pgcmp
    MAHOUTOMITSCHEMAS="${MAHOUTOMITSCHEMAS}" pgcmp_dump_current capturedb ${CAPTUREFILE} ${MAINDATABASE}

    # we should compare against the pgcmp dump
    local VERSIONDUMP=.mahout-data/${DBVERSION}.pgcmp
    if [ -f ${VERSIONDUMP} ]; then
	glog user.info "Found pgcmp data for version ${DBVERSION} - [${VERSIONDUMP}]"
	mahout_pgcmp $CAPTUREFILE $VERSIONDUMP $DBVERSION capturedb false
	#PGBINDIR=${PGBINDIR} PGURI=${COMPARISONDATABASE} PGCMPINPUT1=${CAPTUREFILE} PGCMPINPUT2=${VERSIONDUMP} PGCLABEL1=${DBVERSION} PGCLABEL2=capturedb ${PGCMPHOME}/pgcmp > /dev/null 2>&1
    else
	case $MAHOUTNODETYPE in
	    dev)
		glog user.notice "pgcmp output for version ${DBVERSION} missing"
		glog user.notice "generating pgcmp for version ${DBVERSION}"
		pgcmp_dump_current $DBVERSION ${VERSIONDUMP} ${MAINDATABASE}
		;;
	    *)
		glog user.notice "Environment type [${MAHOUTNODETYPE}] requires pgcmp output"
		glog user.error "Failed to find pgcmp data for version ${DBVERSION} - [${VERSIONDUMP}]"
		exit 1
		;;
	esac
    fi
    
    local depfodder=$PWD/.mahout-temp/mahout-capture-dependency-fodder
    local dependencies=$PWD/.mahout-temp/mahout-capture-dependencies
    local versionorder=$PWD/.mahout-temp/mahout-capture-version-order
    local versioncontent=$PWD/.mahout-temp/mahout-capture-version-content
    for f in $depfodder $dependencies $versionorder $versioncontent; do
	rm -f $f
    done
    if [ -d $versioncontent ]; then
	for oldfile in $versioncontent/*; do
	    rm $oldfile
	done
	rmdir $versioncontent
    fi
    mkdir -p $versioncontent
    calculate_dependencies ${depfodder} ${dependencies} ${versionorder}
    glog user.debug "calced dependencies"

    split_versions ${versioncontent}

    local TEMPSQLFILE=$PWD/.mahout-temp/mahout-capture-sql-application
    rm -f $TEMPSQLFILE
    versionswanted=false
    for propversion in $(cat ${versionorder}); do
	if [[ $propversion == ${DBVERSION} ]]; then
	    # We have reached the point at which versions should get captured
	    versionswanted=true
	    glog user.notice "Capture examining versions to apply - already have ${propversion}"
	else
	    if [[ $versionswanted == "true" ]]; then
		# need to apply scripts to the database
		glog user.notice "Capture needs to apply version ${propversion} from ${versioncontent}/${propversion}"
		version_load_start ${propversion}

		while read line
		do
		    if [[ $(echo ${line} | egrep -c "^version ") -eq 1 ]]; then
			glog user.debug "no action apropos for version line"
		    fi
		    if [[ $(echo ${line} | egrep -c "^requires ") -eq 1 ]]; then
  			glog user.debug "no action apropos for requires line"
		    fi
		    if [[ $(echo ${line} | egrep -c "^ddl ") -eq 1 ]]; then
			local sqlscript=$(echo ${line} | cut -d " " -f 2)
			glog user.notice "apply DDL Script ${sqlscript}"
			md5sum=$(md5sum < ${sqlscript})
			cat ${sqlscript} | md5sum > ${sqlscript}.md5sum
			action_start $propversion capture "DDL script" ${sqlscript} "${md5sum}"
			echo "create temp table t_starting_locks as select n.nspname, c.relname, l.mode, l.granted from pg_catalog.pg_class c, pg_catalog.pg_namespace n, pg_catalog.pg_locks l where c.oid = l.relation and c.relnamespace = n.oid and nspname not in ('pg_catalog') and nspname not like 'pg_toast%' and nspname not like 'pg_temp%';" > ${TEMPSQLFILE}
			cat ${sqlscript} >> ${TEMPSQLFILE}
			rc=$?
			case $rc in
			    0)
				glog user.debug "constructed ${sqlscript} into ${TEMPSQLFILE} ok"
				;;
			    1)
				glog user.error "DDL script ${sqlscript} not found"
				exit 2
				;;
			    *)
				glog user.error "Error adding in DDL script ${sqlscript} - rc=[${rc}]"
				exit 3
				;;
			esac				
			echo "create temp table t_ending_locks as select n.nspname, c.relname, l.mode, l.granted from pg_catalog.pg_class c, pg_catalog.pg_namespace n, pg_catalog.pg_locks l where c.oid = l.relation and c.relnamespace = n.oid and nspname not in ('pg_catalog') and nspname not like 'pg_toast%' and nspname not like 'pg_temp%';
create temp table t_locks_acquired as select nspname, relname, mode from t_ending_locks e where not exists (select 1 from t_starting_locks s where s.nspname = e.nspname and s.relname = e.relname and s.mode = e.mode);
" >> ${TEMPSQLFILE}
			echo "\COPY (select nspname, relname, mode from t_locks_acquired) to '${sqlscript}.${propversion}.locks-acquired';" >> ${TEMPSQLFILE}

			case $MAHOUTOMITPG in
			    true)
				glog user.info "MAHOUTOMITPG is true; not setting up mahout schema"
				;;
			    *)
				if [[ $MAHOUTSEARCHPATH == '' ]]; then
				    $PGBINDIR/psql -d ${MAINDATABASE} -f ${TEMPSQLFILE} --variable ON_ERROR_STOP=1 --single-transaction > ${sqlscript}.${propversion}.log 2>&1
				    retcode=$?
				else
				    PGOPTIONS="--search_path=${MAHOUTSEARCHPATH}" $PGBINDIR/psql -d ${MAINDATABASE} -f ${TEMPSQLFILE} --variable ON_ERROR_STOP=1 --single-transaction > ${sqlscript}.${propversion}.log 2>&1
				    retcode=$?
				fi
				if [ $retcode -ne 0 ]; then
				    glog user.error "DDL script ${sqlscript} failed against database [${MAINDATABASE}]"
				    action_end ${propversion} "capture" "DDL script" "${sqlscript}" "${md5sum}" f
				    version_load_end ${propversion} "broken"
				    exit 1
				else
				    action_end ${propversion} "capture" "DDL script" "${sqlscript}" "${md5sum}" t			   
				    rm ${TEMPSQLFILE}
				fi
			    ;;
			esac
		    fi
		    if [[ $(echo ${line} | egrep -c "^dml ") -eq 1 ]]; then
			local dmlscript=$(echo ${line} | cut -d " " -f 2)
			local dmlarg=$(echo ${line} | cut -d " " -f 3)
			cat ${dmlscript} | md5sum > ${dmlscript}.md5sum
			local predmlcmp=$(mktemp /tmp/mahout-capture-pre-dml.XXXXXXXXXXXXXXXX)
			local postdmlcmp=$(mktemp /tmp/mahout-capture-pre-dml.XXXXXXXXXXXXXXXX)
			# Make sure that DML does not modify the schema
			action_start ${propversion} "capture" "dml script" "${dmlscript}" "${md5sum}"
			pgcmp_dump_current pre-dml $predmlcmp ${MAINDATABASE}

			case $MAHOUTOMITPG in
			    true)
				glog user.info "pgcmp_dump_current MAHOUTOMITPG is true; not dumping pgcmp data"
				;;
			    *)
				
				if [[ $MAHOUTSEARCHPATH == '' ]]; then
				    $PGBINDIR/psql -d ${MAINDATABASE} -f ${dmlscript} > ./${dmlscript}.${propversion}.log 2>&1
				    retcode=$?
				else
				    PGOPTIONS="--search_path=${MAHOUTSEARCHPATH}" $PGBINDIR/psql -d ${MAINDATABASE} -f ${dmlscript} > ./${dmlscript}.${propversion}.log 2>&1
				    retcode=$?
				fi
				;;
			esac
			pgcmp_dump_current post-dml $postdmlcmp ${MAINDATABASE}
			mahout_pgcmp $predmlcmp $postdmlcmp pre-dml post-dml false
			# PGBINDIR=${PGBINDIR} PGURI=${COMPARISONDATABASE} PGCMPINPUT1=${predmlcmp} PGCMPINPUT2=${postdmlcmp} PGCLABEL1=pre-dml PGCLABEL2=post-dml ${PGCMPHOME}/pgcmp > /dev/null 2>&1
			action_end ${propversion} "capture" "dml script" "${dmlscript}" "${md5sum}" t
			rm $predmlcmp $postdmlcmp
		    fi
		    if [[ $(echo ${line} | egrep -c "^unix ") -eq 1 ]]; then
			local unixcommand=$(echo ${line} | cut -d " " -f 2)
			local unixarg=$(echo ${line} | cut -d " " -f 3)
			local preunixcmp=$(mktemp /tmp/mahout-capture-pre-unix.XXXXXXXXXXXXXXXX)
			local postunixcmp=$(mktemp /tmp/mahout-capture-pre-unix.XXXXXXXXXXXXXXXX)
			cat ${unixcommand} | md5sum > ${unixcommand}.md5sum
			action_start ${propversion} "capture" "unix script" "${unixcommand}" "${md5sum}"
			pgcmp_dump_current pre-unix ${preunixcmp}  ${MAINDATABASE}
			case $MAHOUTOMITPG in
			    true)
				glog user.info "pgcmp_dump_current MAHOUTOMITPG is true; not dumping pgcmp data"
				;;
			    *)
				MAINDATABASE=${MAINDATABASE} ./${unixcommand} ${unixarg} > ./${unixcommand}.${propversion}.log 2>&1
				pgcmp_dump_current post-unix ${postunixcmp} ${MAINDATABASE}
				;;
			esac
			mahout_pgcmp $preunixcmp $postunixcmp pre-unix post-unix false
			rm $preunixcmp $postunixcmp
			action_end ${propversion} "capture" "unix script" "${unixcommand}" "${md5sum}" t
		    fi
		    if [[ $(echo ${line} | egrep -c "^psqltest ") -eq 1 ]]; then
			local testscript=$(echo ${line} | cut -d " " -f 2)
			echo "apply SQL test script ${testscript}"
			md5sum=$(md5sum < ${testscript})
			echo ${md5sum} > ${testscript}.md5sum
			action_start ${propversion} "capture" "psql test script" "${testscript}" "${md5sum}"
			case $MAHOUTOMITPG in
			    true)
				glog user.info "pgcmp_dump_current MAHOUTOMITPG is true; not dumping pgcmp data"
				;;
			    *)			
				$PGBINDIR/psql -d ${MAINDATABASE} --variable ON_ERROR_STOP=1 -f ${testscript} --single-transaction > ${testscript}.${propversion}.log 2>&1
				retcode=$?
				if [ $retcode -eq 0 ]; then
				    action_end ${propversion} "capture" "psql test script" "${testscript}" "${md5sum}" t
				else
				    glog user.error "test script ${testscript} failed against database [${MAINDATABASE}]"
				    action_end ${propversion} "capture" "psql test script" "${testscript}" "${md5sum}" f
				    exit 1
				fi
				;;
			esac
		    fi
		    if [[ $(echo ${line} | egrep -c "^common tests ") -eq 1 ]]; then
			glog user.debug "no action apropos for common tests in capture"
		    fi
		    glog user.debug "line of ${propversion}: ${line}"
		done < ${versioncontent}/${propversion}

		# Apply new version to it...
		version_load_end ${propversion} completed

		# Run common tests
		if [ -f ${versioncontent}/CommonTests ]; then
		    glog user.debug "Checking which CommonTests to run"
		    while read line
		    do
			local vfrom=Base
			local vto=$(tail -1 ${versionorder})
			local testscript
			glog user.debug "common test check for line ${line}"
			## Most specific... # psqltest from v1 to v2 testname
			if [ $(echo ${line} | egrep -c "^psqltest from [a-zA-Z0-9.]+ to [a-zA-Z0-9.]+") -eq 1 ]; then
			    # split out psql from v1 to v2 testname
			    vfrom=$(echo ${line} | cut -d " " -f 3)
			    vto=$(echo ${line} | cut -d " " -f 5)
			    testscript=$(echo ${line} | cut -d " " -f 6)
			    glog user.debug "test [${testscript}] is run from [${vfrom}] to [${vto}]"
			else
			    if [ $(echo ${line} | egrep -c "^psqltest from [a-zA-Z0-9.]+") -eq 1 ]; then
				vfrom=$(echo ${line} | cut -d " " -f 3)
				testscript=$(echo ${line} | cut -d " " -f 4)
				glog user.debug "test [${testscript}] is run from [${vfrom}]"
			    else
				if [ $(echo ${line} | egrep -c "^psqltest [a-zA-Z0-9.]+") -eq 1 ]; then
				    testscript=$(echo ${line} | cut -d " " -f 2)
				    glog user.debug "Always run test [${testscript}]"
				else
				    glog user.debug "No test on line ${line}"
				    testscript=""
				fi
			    fi
			fi
			if [ "${testscript}" != "" ]; then
			    glog user.debug "common test [${testscript}] to be run from [${vfrom}] to [${vto}]"
			    # now, iterate across the versions in ${versionorder} and see if
			    # the present version ${propversion} is within the range
			    local ver_in_range=false
			    local reached_ver=false
			    local reached_from=false
			    local reached_to=false
			    local past_to=false
			    for vi in $(cat ${versionorder}); do
				if [ ${vi} == ${propversion} ]; then
				    reached_ver=true
				fi
				if [ ${vi} == ${vfrom} ]; then
				    reached_from=true
				fi
				if [ ${vi} == ${vto} ]; then
				    reached_to=true
				fi
				if [ $reached_to == true ]; then
				    if [ $vi != ${vto} ]; then
					past_to=true
				    fi
				fi
				# if present version is within the range then...
				# - reached_ver = true
				# - past_to = false
				if [ $reached_ver == "true" ]; then
				    if [ $past_to == "false" ]; then
					ver_in_range=true
				    fi
				fi
				glog user.debug "vi:${vi} cversion: ${propversion}  from:${vfrom} to:${vto} reached_ver:${reached_ver} ver_in_range:${ver_in_range} reached_from:${reached_from} reached_to:${reached_to} past_to:${past_to}"
			    done
			    if [ $ver_in_range == "true" ]; then
				glog user.notice "running common SQL test script ${testscript}"
				md5sum=$(md5sum < ${testscript})
				echo ${md5sum} > ${testscript}.md5sum
				tslog=${testscript}.${propversion}.log
				action_start ${propversion} "capture" "psql test script" "${testscript}" "${md5sum}"
				case $MAHOUTOMITPG in
				    true)
					glog user.info "pgcmp_dump_current MAHOUTOMITPG is true; not dumping pgcmp data"
					;;
				    *)
					
					$PGBINDIR/psql -d ${MAINDATABASE} --variable ON_ERROR_STOP=1 -f ${testscript} --single-transaction > $tslog 2>&1
					retcode=$?
					if [ $retcode -eq 0 ]; then
					    action_end ${propversion} "capture" "psql test script" "${testscript}" "${md5sum}" t
					    
					else
					    glog user.error "test script ${testscript} failed against database [${MAINDATABASE}]"
					    action_end ${propversion} "capture" "psql test script" "${testscript}" "${md5sum}" f
					    glog user.notice "test script ${testscript} generated log file [${tslog}] - review for error conditions"
					    exit 1
					fi
					;;
				esac
			    else
				glog user.notice "Not running common test ${testscript} - version [${propversion}] not in range ([${vfrom}],[${vto}])"
			    fi
			fi
		    done < ${versioncontent}/CommonTests
		fi
		
		# then run pgcmp-dump to get the version
		VERSIONOUTPUT=${PWD}/.mahout-data/${propversion}.pgcmp
		pgcmp_dump_current ${propversion} ${VERSIONOUTPUT} ${MAINDATABASE}
   	    else
		glog user.debug "Capture not applying earlier version ${propversion}"
	    fi
	fi
    done		
    rm -f ${depfodder} ${dependencies} ${versionorder}
    rm -rf ${versioncontent}
    summary capture
}

function mahout_check () {
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT
    
    INMAHOUT=$(in_mahout_home)
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "check: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi

    # acquire configuration from mahout.conf
    read_mahout_config
    # check the version in the database
    DBVERSION=$(get_mahout_version ${MAINDATABASE})
    glog user.info "check: found version: ${DBVERSION}"
    
    # Dump current schema using pgcmp-dump
    CURRENTCMP=${PWD}/.mahout-temp/CurrentSchema.pgcmp
    pgcmp_dump_current CurrentSchema ${CURRENTCMP} ${MAINDATABASE}
    
    # Also check md5 checksums on /all/ scripts
    #    - just a new loop...
    local sanswhitecomments=$PWD/.mahout-temp/mahout-split-cleanwhitespace
    local allscripts=$PWD/.mahout-temp/mahout-check-all-scripts
    local lineno
    local action
    local filename
    cut -d \# -f 1 < mahout.control | \
	sed "s/^[ \t]*//" | \
	sed "s/[ \t]*$//" | \
	sed "s/[\t]/ /g" | \
	sed "s/  / /g"           > ${sanswhitecomments}
    egrep -n "^(ddl|dml|unix|psqltest|common tests)[ \t]*" ${sanswhitecomments} > ${allscripts}
    while read line
    do
	lineno=$(echo ${line} | cut -d : -f 1)
	action=$(echo ${line} | cut -d : -f 2 | cut -d " " -f 1)
	filename=$(echo ${line} | cut -d : -f 2 | cut -d " " -f 2)
	if [ -f ${filename} ]; then
	    # is there an md5 sum file?
	    if [ -f ${filename}.md5sum ]; then
		recordedsum=$(cat ${filename}.md5sum)
		computedsum=$(cat ${filename} | md5sum -)
		if [ "${recordedsum}" != "${computedsum}" ]; then
		    glog user.error "checksum mismatch for action ${action} / file ${filename} - computed: [${computedsum}] recorded: [${recordedsum}]"
		else
		    glog user.notice "checksum fine for action ${action} / file ${filename} - [${computedsum}]"
		fi
	    else
		glog user.error "no checksum recorded for action ${action} / file ${filename}"
	    fi
	else
	    glog user.error "no script file recorded for action ${action} / file ${filename}"
	fi
    done < ${allscripts}

    # pgcmp can have a set of acceptable differences...
    #    - Needs to have a config parm for PGCEXPLANATIONS
    glog user.notice "run pgcmp to examine schema for differences against version ${DBVERSION}"

    PGCMPWORK=$PWD/.mahout-temp/mahout-check-pgcmp-work
    mkdir -p $PGCMPWORK
    mahout_pgcmp $CURRENTCMP .mahout-data/${DBVERSION}.pgcmp TempCurrent $DBVERSION false
    # clean up temp files now...
    rm -rf ${PGCMPWORK} ${sanswhitecomments} ${allscripts} ${CURRENTCMP}
    summary check
}

function mahout_upgrade () {
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT
    
    INMAHOUT=$(in_mahout_home)
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "upgrade: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    # acquire configuration from mahout.conf
    read_mahout_config
    # check the version in the database
    DBVERSION=$(get_mahout_version ${MAINDATABASE})
    glog user.info "upgrade: found version: ${DBVERSION}"

    # Dump current schema using pgcmp-dump
    local CURRENTCMP=${PWD}/.mahout-temp/CurrentSchema.pgcmp
    pgcmp_dump_current CurrentSchema ${CURRENTCMP} ${MAINDATABASE}

    glog user.info "run pgcmp to examine schema for differences against version ${DBVERSION}"
    PGCMPWORK=$PWD/.mahout-temp/mahout-upgrade-pgcmp-work
    mkdir -p $PGCMPWORK
    mahout_pgcmp $CURRENTCMP .mahout-data/${DBVERSION}.pgcmp  CurrentSchema $DBVERSION false

    # Very similar to mahout_capture, except that it doesn't write out md5sum/pgcmp output
    local versioncontent=$(mktemp -d $PWD/.mahout-temp/mahout-upgrade-version-content.XXXXXXXXXXXX)
    local depfodder=$PWD/.mahout-temp/mahout-upgrade-dependency-fodder
    local dependencies=$PWD/.mahout-temp/mahout-upgrade-dependencies
    local versionorder=$PWD/.mahout-temp/mahout-upgrade-version-order
    local versioncontent=$(mktemp -d $PWD/.mahout-temp/mahout-upgrade-version-content.XXXXXXXXXXXX)
    calculate_dependencies ${depfodder} ${dependencies} ${versionorder}
    glog user.notice "calced dependencies"
    split_versions ${versioncontent}
    versionswanted=false
    for propversion in $(cat ${versionorder}); do
	if [[ $propversion == ${DBVERSION} ]]; then
	    # We have reached the point at which versions should get captured
	    versionswanted=true
	    glog user.notice "Capture examining versions to apply - already have ${propversion}"
	else
	    if [[ $versionswanted == "true" ]]; then
		# need to apply scripts to the database
		glog user.notice "Upgrade needs to apply version ${propversion}"
		version_load_start ${propversion}
		
		glog user.notice "From script ${versioncontent}/${propversion}"
		while read line
		do
		    if [[ $(echo ${line} | egrep -c "^version ") -eq 1 ]]; then
			echo "no action apropos for version line"
		    fi
		    if [[ $(echo ${line} | egrep -c "^requires ") -eq 1 ]]; then
  			echo "no action apropos for requires line"
		    fi
		    if [[ $(echo ${line} | egrep -c "^ddl ") -eq 1 ]]; then
			local sqlscript=$(echo ${line} | cut -d " " -f 2)
			glog user.notice "apply DDL Script ${sqlscript}"
			md5sum=$(md5sum < ${sqlscript})
			cat ${sqlscript} | md5sum > ${sqlscript}.md5sum
			action_start $propversion upgrade "DDL script" ${sqlscript} "${md5sum}"

			if [[ $MAHOUTSEARCHPATH == '' ]]; then
			    $PGBINDIR/psql -d ${MAINDATABASE} -f ${sqlscript} --variable ON_ERROR_STOP=1 --single-transaction > ${sqlscript}.${propversion}.log 2>&1
			    retcode=$?
			else
			    PGOPTIONS="--search_path=${MAHOUTSEARCHPATH}" $PGBINDIR/psql -d ${MAINDATABASE} -f ${sqlscript} --variable ON_ERROR_STOP=1 --single-transaction > ${sqlscript}.${propversion}.log 2>&1
			    retcode=$?
			fi
			if [ $retcode -ne 0 ]; then
			    glog user.error "DDL script ${sqlscript} failed against database [${MDB}]"
			    action_end ${propversion} "upgrade" "DDL script" "${sqlscript}" "${md5sum}" f
			    exit 1
			else
			    action_end ${propversion} "upgrade" "DDL script" "${sqlscript}" "${md5sum}" t
			fi
		    fi
		    if [[ $(echo ${line} | egrep -c "^dml ") -eq 1 ]]; then
			local sqlscript=$(echo ${line} | cut -d " " -f 2)
			glog user.notice "apply DML Script ${sqlscript}"
			md5sum=$(md5sum < ${sqlscript})
			cat ${sqlscript} | md5sum > ${sqlscript}.md5sum
			action_start $propversion upgrade "DML script" ${sqlscript} "${md5sum}"
			if [[ $MAHOUTSEARCHPATH == '' ]]; then
			    $PGBINDIR/psql -d ${MAINDATABASE} -f ${sqlscript} --variable ON_ERROR_STOP=1 --single-transaction > ${sqlscript}.${propversion}.log 2>&1
			    retcode=$?
			else
			    PGOPTIONS="--search_path=${MAHOUTSEARCHPATH}" $PGBINDIR/psql -d ${MAINDATABASE} -f ${sqlscript} --variable ON_ERROR_STOP=1 --single-transaction > ${sqlscript}.${propversion}.log 2>&1
			    retcode=$?
			fi

			if [ $retcode -ne 0 ]; then
			    glog user.error "DML script ${sqlscript} failed against database [${MDB}]"
			    action_end ${propversion} "upgrade" "DML script" "${sqlscript}" "${md5sum}" f
			    exit 1
			else
			    action_end ${propversion} "upgrade" "DML script" "${sqlscript}" "${md5sum}" t
			fi
		    fi

		    if [[ $(echo ${line} | egrep -c "^unix ") -eq 1 ]]; then
			local unixcommand=$(echo ${line} | cut -d " " -f 2)
			local unixarg=$(echo ${line} | cut -d " " -f 3)
			cat ${unixcommand} | md5sum > ${unixcommand}.md5sum

			action_start ${propversion} "upgrade" "unix script" "${unixcommand}" "${md5sum}"			
			MAINDATABASE=${MAINDATABASE} ./${unixcommand} ${unixarg} > ${unixcommand}.${propversion}.log 2>&1
			action_end ${propversion} "upgrade" "unix script" "${unixcommand}" "${md5sum}" t
		    fi
		    if [[ $(echo ${line} | egrep -c "^psqltest ") -eq 1 ]]; then
			glog user.debug "no action apropos for psqltest on upgrade"
		    fi
		    if [[ $(echo ${line} | egrep -c "^common tests ") -eq 1 ]]; then
			glog user.debug "no action apropos for common tests"
		    fi
		    glog user.debug "line of ${propversion}: ${line}"
		done < ${versioncontent}/${propversion}

		# Apply new version to it...
		version_load_end ${propversion} completed
		
   	    else
		glog user.debug "Upgrade not applying earlier version ${propversion}"
	    fi
	fi
    done		
    rm -f ${depfodder} ${dependencies} ${versionorder}
    rm -rf ${versioncontent} ${PGCMPWORK}
    summary upgrade
}

function mahout_initialize_schema () {
    echo "begin;  create schema if not exists \"${MAHOUTSCHEMA}\";  set search_path to \"${MAHOUTSCHEMA}\";
    create table if not exists version_log (version text primary key, install_start timestamptz default clock_timestamp(), install_end timestamptz, status text);
    create table if not exists action_log (id serial primary key, action_start timestamptz default clock_timestamp(), action_end timestamptz, action text, version text, action_type text, action_source text, action_md5 text, result text, success boolean);
  truncate version_log;
  truncate action_log;"
}

function mahout_install () {
    local STOPATVERSION=$1
    
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT
    
    INMAHOUT=$(in_mahout_home)
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "upgrade: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    # acquire configuration from mahout.conf
    read_mahout_config
    
    # check that there's no Mahout schema
    local SCHEMAQ="select count(1) from pg_catalog.pg_namespace where nspname='${MAHOUTSCHEMA}';"
    local MCOUNT=$($PGBINDIR/psql -d ${MAINDATABASE} -qAt -c "${SCHEMAQ}")
    mkdir -p $PWD/.mahout-temp
    local SETUPQ=$PWD/.mahout-temp/mahout-install-setup.sql
    glog user.notice "Setup of mahout in [${SETUPQ}]"
    touch $SETUPQ
    
    case $MCOUNT in
	1)
	    glog user.error "Database already has Mahout schema ${MAHOUTSCHEMA}"
	    exit 1
	    ;;
	0)
	    glog user.notice "Initializing database with Mahout schema: ${MAHOUTSCHEMA}"
	    mahout_initialize_schema > ${SETUPQ}
	    ;;
    esac
    
    echo " insert into action_log (action_start, action_end, action, version, action_type, action_source, result, success) values (clock_timestamp(), clock_timestamp(), 'install mahout', 'MahoutInstall', 'install', 'mahout', 'initialized', 't');
  commit;" >> ${SETUPQ}

    $PGBINDIR/psql -d ${MAINDATABASE} -f ${SETUPQ}
    retcode=$?
    if [ $retcode -ne 0 ]; then
	glog user.error "Unable to setup mahout schema ${MAHOUTSCHEMA} in database [${MAINDATABASE}]"
	exit 1
    else
	glog user.info "Setup mahout schema ${MAHOUTSCHEMA} in database [${MAINDATABASE}]"
	rm -f ${SETUPQ}
    fi
    # ensure directories are present
    for sd in logs data temp builds; do
	dir=${PWD}/.mahout-${sd}
	if [ -d $dir ]; then
	    glog user.debug "Directory [${dir}] already exists"
	else
	    glog user.warning "creating missing Mahout directory [${dir}]"
	    mkdir -p $dir
	fi
    done
    
    local versioncontent=$(mktemp -d $PWD/.mahout-temp/mahout-install-version-content.XXXXXXXXXXXX)
    local depfodder=$PWD/.mahout-temp/mahout-install-dependency-fodder
    local dependencies=$PWD/.mahout-temp/mahout-install-dependencies
    local versionorder=$PWD/.mahout-temp/mahout-install-versionorder
    calculate_dependencies ${depfodder} ${dependencies} ${versionorder}

    split_versions ${versioncontent}

    glog user.notice "Split versions"

    for propversion in $(cat ${versionorder}); do
	glog user.info "mahout install working on version ${propversion}"
	version_load_start ${propversion}

	while read line
	do
	    if [[ $(echo ${line} | egrep -c "^version ") -eq 1 ]]; then
		echo "no action apropos for version line"
	    fi
	    if [[ $(echo ${line} | egrep -c "^requires ") -eq 1 ]]; then
  		echo "no action apropos for requires line"
	    fi
	    if [[ $(echo ${line} | egrep -c "^ddl ") -eq 1 ]]; then
		local sqlscript=$(echo ${line} | cut -d " " -f 2)
		glog user.notice "apply DDL Script ${sqlscript}"
		md5sum=$(md5sum < ${sqlscript})
		cat ${sqlscript} | md5sum > ${sqlscript}.md5sum
		action_start $propversion capture "DDL script" ${sqlscript} "${md5sum}"
		if [[ $MAHOUTSEARCHPATH == '' ]]; then
		    $PGBINDIR/psql -d ${MAINDATABASE} --variable ON_ERROR_STOP=1 -f ${sqlscript} --single-transaction > ${sqlscript}.${propversion}.log 2>&1
		    retcode=$?
		else
		    PGOPTIONS="--search_path=${MAHOUTSEARCHPATH}" $PGBINDIR/psql -d ${MAINDATABASE} --variable ON_ERROR_STOP=1 -f ${sqlscript} --single-transaction > ${sqlscript}.${propversion}.log 2>&1
		    retcode=$?
		fi
		if [ $retcode -ne 0 ]; then
		    glog user.error "DDL script ${sqlscript} failed against database [${MDB}]"
		    action_end ${propversion} "capture" "DDL script" "${sqlscript}" "${md5sum}" f
		    exit 1
		else
		    action_end ${propversion} "capture" "DDL script" "${sqlscript}" "${md5sum}" t
		fi
	    fi
	    if [[ $(echo ${line} | egrep -c "^dml ") -eq 1 ]]; then
		local sqlscript=$(echo ${line} | cut -d " " -f 2)
		glog user.notice "apply DML Script ${sqlscript}"
		md5sum=$(md5sum < ${sqlscript})
		cat ${sqlscript} | md5sum > ${sqlscript}.md5sum
		action_start $propversion capture "DML script" ${sqlscript} "${md5sum}"
		if [[ $MAHOUTSEARCHPATH == '' ]]; then
		    $PGBINDIR/psql -d ${MAINDATABASE} --variable ON_ERROR_STOP=1 -f ${sqlscript} --single-transaction > ${sqlscript}.${propversion}.log 2>&1
		    retcode=$?
		else
		    PGOPTIONS="--search_path=${MAHOUTSEARCHPATH}" $PGBINDIR/psql -d ${MAINDATABASE} --variable ON_ERROR_STOP=1 -f ${sqlscript} --single-transaction > ${sqlscript}.${propversion}.log 2>&1
		    retcode=$?
		fi
		if [ $retcode -ne 0 ]; then
		    glog user.error "DML script ${sqlscript} failed against database [${MDB}]"
		    action_end ${propversion} "capture" "DML script" "${sqlscript}" "${md5sum}" f
		    exit 1
		else
		    action_end ${propversion} "capture" "DML script" "${sqlscript}" "${md5sum}" t
		fi
	    fi
	    if [[ $(echo ${line} | egrep -c "^unix ") -eq 1 ]]; then
		local unixcommand=$(echo ${line} | cut -d " " -f 2)
		local unixarg=$(echo ${line} | cut -d " " -f 3)
		cat ${unixcommand} | md5sum > ${unixcommand}.md5sum
		glog user.info "script - ${MAINDATABASE} loading unix script ${unixcommand}, logging to ${unixcommand}.${propversion}.log"
		action_start ${propversion} "capture" "unix script" "${unixcommand}" "${md5sum}"
		MAINDATABASE=${MAINDATABASE} ./${unixcommand} ${!unixarg} > ./${unixcommand}.${propversion}.log 2>&1
		action_end ${propversion} "capture" "unix script" "${unixcommand}" "${md5sum}" t
	    fi
	    if [[ $(echo ${line} | egrep -c "^psqltest ") -eq 1 ]]; then
		glog user.notice "psqltest does not run at install time"
	    fi
	    if [[ $(echo ${line} | egrep -c "^common tests") -eq 1 ]]; then
		glog user.notice "no action apropos for common tests"
	    fi
	done < ${versioncontent}/${propversion}

	# If the common tests exists, the
	if [ -e ${versioncontent}/CommonTests ]; then
	    # Now, walking though common tests
	    glog user.notice "applying common tests"
	fi


	# if we're in a dev environment, then generate a pgcmp file after loading each version
	case $MAHOUTNODETYPE in
	    dev)
		PGCMPCAPTUREFILE=${PWD}/.mahout-data/${propversion}.pgcmp
		glog user.notice "Generating pgcmp output for version ${propversion} in ${PGCMPCAPTUREFILE}"
		pgcmp_dump_current $propversion $PGCMPCAPTUREFILE $MAINDATABASE
		;;
	esac
	version_load_end ${propversion} completed
	if [[ ${propversion} == ${STOPATVERSION} ]]; then
	    glog user.notice "Stopping at version ${propversion}"
	    exit 0
	fi
    done
    
    rm -f ${SETUPQ} ${depfodder} ${dependencies} ${versionorder}
    rm -rf ${versioncontent}
    summary install
}

function mahout_diff () {
    # use pgcmp to compare current schema in database against what is supposed to be there
    # This might be a good way of generating expected differences...

    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT
    
    INMAHOUT=$(in_mahout_home)
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "upgrade: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    # acquire configuration from mahout.conf
    read_mahout_config
    
    # check the version in the database
    DBVERSION=$(get_mahout_version ${MAINDATABASE})
    glog user.info "diff: found version: ${DBVERSION}"
    
    # Dump current schema using pgcmp-dump
    local CURRENTCMP=${PWD}/.mahout-temp/CurrentSchema.pgcmp
    pgcmp_dump_current CurrentSchema ${CURRENTCMP} ${MAINDATABASE}

    glog user.notice "run pgcmp to examine schema for differences against version ${DBVERSION}"
    PGCMPWORK=$(mktemp -d $PWD/.mahout-temp/mahout-upgrade-pgcmp-work.XXXXXXXXXXX)
    mahout_pgcmp $CURRENTCMP .mahout-data/${DBVERSION}.pgcmp CurrentSchema $DBVERSION false
    summary diff
}

function report_on_version () {
    local VERSION=$1
    $PGBINDIR/psql -d ${MAINDATABASE} -xqtA -F : -c "select install_start, install_end, status from \"${MAHOUTSCHEMA}\".version_log where version='${VERSION}';"
    echo ""
    glog user.notice "Steps for version ${VERSION}"
    echo ""
    $PGBINDIR/psql -d ${MAINDATABASE} -xqtA -F : -c "select action_start, action_end, version, action, action_type, action_source, result, success from \"${MAHOUTSCHEMA}\".action_log where version='${VERSION}' order by action_start;"
}

function mahout_history () {
    ## List the upgrade activities performed against this database
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT
    
    INMAHOUT=$(in_mahout_home)
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "upgrade: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi

    # acquire configuration from mahout.conf
    read_mahout_config

    # check the version in the database
    DBVERSION=$(get_mahout_version ${MAINDATABASE})
    glog user.info "history: Schema on version: ${DBVERSION}"
    echo ""

    # Very similar to mahout_capture, except that it doesn't write out md5sum/pgcmp output
    local depfodder=$PWD/.mahout-temp/mahout-history-dependency-fodder
    local dependencies=$PWD/.mahout-temp/mahout-history-dependencies
    local versionorder=$PWD/.mahout-temp/mahout-history-version-order
    local versioncontent=$(mktemp -d $PWD/.mahout-temp/mahout-history-version-content.XXXXXXXXXXXX)

    calculate_dependencies ${depfodder} ${dependencies} ${versionorder}
    split_versions ${versioncontent}

    futureversions=false
    for propversion in $(cat ${versionorder}); do
	glog user.notice "Examining version ${propversion}"
	if [[ $propversion == ${DBVERSION} ]]; then
	    # We have reached the point at which versions should get captured
	    futureversions=true
	    glog user.notice "Found current version ${propversion} - later versions have not been applied"
	    report_on_version "${propversion}"
	else
	    if [[ $futureversions == "true" ]]; then
		glog user.notice "version ${propversion} has not been applied"
	    else
		glog user.notice "version ${propversion} has been applied"
		report_on_version "${propversion}"
	    fi
	fi
    done

    # Clean up afterwards
    rm -rf ${depfodder} ${dependencies} ${versionorder} ${versioncontent}
}

function mahout_attach () {
    local PRODVERSION=${PARM1}
    local CMPDATA
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT

    INMAHOUT=$(in_mahout_home)
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "attach: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    
    # acquire configuration from mahout.conf
    read_mahout_config
    glog user.info "Attaching version [${PRODVERSION}] changes to database MAINDATABASE=[${MAINDATABASE}]"

    # Verify that the version PRODVERSION matches against a valid
    # version, e.g. - one where there is a dump found in .mahout-data
    CMPDATA=${PWD}/.mahout-data/${PRODVERSION}.pgcmp
    if [[ -e ${CMPDATA} ]]; then
	glog user.info "Found comparison data for version - [${CMPDATA}]"
    else
	glog user.error "No comparison data found for version [${PRODVERSION}] - [${CMPDATA}]"
	exit 1
    fi
    
    # Verify that the database does NOT have Mahout installed, e.g. -
    # no Mahout schema
    query="select count(1) from pg_catalog.pg_namespace where nspname = '${MAHOUTSCHEMA}';"
    scount=$($PGBINDIR/psql -d ${MAINDATABASE} -c "${query}" -qAt)
    if [[ ${scount} != 0 ]]; then
	glog user.error "attach: main database already has ${MAHOUTSCHEMA} schema - apparently already mahout-ized"
	exit 1
    fi
    
    # Most likely needs to have a pgcmp "expected differences" file to
    # indicate what differences are acceptable; need to be quite
    # strict about this!

    # run pgcmp to see differences versus the specified version
    # any unexpected differences lead to failing the install
    LABEL="production-${PRODVERSION}"
    CAPTUREFILE=${PWD}/.mahout-temp/attach-${PRODVERSION}.pgcmp
    pgcmp_dump_current "${LABEL}" ${CAPTUREFILE} ${MAINDATABASE}

    # Now, run pgcmp against the two schemas:
    PGCMPWORK=$(mktemp -d $PWD/.mahout-temp/mahout-attach-pgcmp-work.XXXXXXXXXXX)
    PGCWORKDIR=$PGCMPWORK mahout_pgcmp  $CAPTUREFILE .mahout-data/${PRODVERSION}.pgcmp $LABEL $PRODVERSION false

    # But if there are no differences, then we need to add mahout
    # schema as is added by mahout install/init, and indicate
    # that it was marked as OK with the specified version
    local SETUPQ=$PWD/.mahout-temp/mahout-attach-setup
    mahout_initialize_schema > ${SETUPQ}
    echo " insert into action_log (action_start, action_end, action, version, action_type, action_source, result, success) values (clock_timestamp(), clock_timestamp(), 'attach mahout', '${PRODVERSION}', 'attach', 'mahout', 'initialized', 't');
    insert into version_log (version, install_start, install_end) values ('${PRODVERSION}', clock_timestamp(), clock_timestamp());
  commit;" >> ${SETUPQ}

    $PGBINDIR/psql -d ${MAINDATABASE} -f ${SETUPQ} > /dev/null 2>&1
    retcode=$?
    if [ $retcode -ne 0 ]; then
	glog user.error "Unable to setup mahout schema ${MAHOUTSCHEMA} in database [${MAINDATABASE}]"
	exit 1
    else
	glog user.notice "Setup mahout schema ${MAHOUTSCHEMA} in database [${MAINDATABASE}]"
	rm -f ${SETUPQ}
    fi
    glog user.notice "mahout attach completed for version [${PRODVERSION}] in database [${MAINDATABASE}]"
    summary attach
}

function mahout_changes () {
    echo "changes Not implemented yet"
    exit 1    
    summary changes
}

function mahout_build () {
    local BLABEL=$1
    local BUILDTYPE=$2
    local BHOME=$(mktemp -d $PWD/.mahout-temp/mahout-build-path.XXXXXXXXXXXXXXX)
    mkdir -p ${BHOME}/${BLABEL}
    glog user.info "mahout build generated build directory ${BHOME}/${BLABEL}"
    tar cf - --exclude=.mahout-temp --exclude="*~" . | (cd ${BHOME}/${BLABEL}; tar xf -)
    glog user.notice "mahout build copied build material to ${BHOME}/${BLABEL}"

    glog user.notice "mahout build: trimming unneeded material"
    for exclusion in .mahout-logs .mahout-temp .mahout-builds; do
	EXCLUSIONDIR=${BHOME}/${BLABEL}/${exclusion}
	if [[ -d ${EXCLUSIONDIR}  ]]; then
	    rm -rf ${EXCLUSIONDIR}
	fi
    done

    BUILDFILE=${PWD}/.mahout-builds/${BLABEL}.${BUILDTYPE}
    
    case $BUILDTYPE in
	tar)
	    (cd ${BHOME}; tar --create --file=${BUILDFILE} ${BLABEL})
	    ;;
	tar.gz)
	    (cd ${BHOME}; tar --create --gzip --file=${BUILDFILE} ${BLABEL})
	    ;;
	tar.bz)
	    (cd ${BHOME}; tar --create --bzip2 --file=${BUILDFILE} ${BLABEL})
	    ;;
	*)
	    glog user.error "Invalid build target type (BUILDTYPE): [${BUILDTYPE}] - must be one of (tar, tar.gz, tar.bz)"
	    ;;
    esac
    if [[ -d ${BHOME} ]]; then
	rm -rf ${BHOME}
    fi
    glog user.notice "Build generated as ${BUILDFILE}"
    summary build
}



function mahout_attach () {
    local PRODVERSION=${PARM1}
    local CMPDATA
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT

    INMAHOUT=$(in_mahout_home)
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "attach: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    
    # acquire configuration from mahout.conf
    read_mahout_config
    glog user.info "Attaching version [${PRODVERSION}] changes to database MAINDATABASE=[${MAINDATABASE}]"

    # Verify that the version PRODVERSION matches against a valid
    # version, e.g. - one where there is a dump found in .mahout-data
    CMPDATA=${PWD}/.mahout-data/${PRODVERSION}.pgcmp
    if [[ -e ${CMPDATA} ]]; then
	glog user.notice "Found comparison data for version - [${CMPDATA}]"
    else
	glog user.error "No comparison data found for version [${PRODVERSION}] - [${CMPDATA}]"
	exit 1
    fi

    # Need to rummage through the cluster to get all the Database URIs for nodes
    
    
    # Verify that every database does NOT have Mahout installed, e.g. -
    # no Mahout schema
    query="select count(1) from pg_catalog.pg_namespace where nspname = '${MAHOUTSCHEMA}';"
    scount=$($PGBINDIR/psql -d ${MAINDATABASE} -c "${query}" -qAt)
    if [[ ${scount} != 0 ]]; then
	glog user.error "attach: main database already has ${MAHOUTSCHEMA} schema - apparently already mahout-ized"
	exit 1
    fi
    
    # Most likely needs to have a pgcmp "expected differences" file to
    # indicate what differences are acceptable; need to be quite
    # strict about this!

    # run pgcmp to see differences versus the specified version
    # any unexpected differences lead to failing the install
    LABEL="production-${PRODVERSION}"
    CAPTUREFILE=${PWD}/.mahout-temp/attach-${PRODVERSION}.pgcmp
    pgcmp_dump_current "${LABEL}" ${CAPTUREFILE} ${MAINDATABASE}

    # Now, run pgcmp against the two schemas:
    PGCMPWORK=$(mktemp -d $PWD/.mahout-temp/mahout-attach-pgcmp-work.XXXXXXXXXXX)
    PGCWORKDIR=$PGCMPWORK mahout_pgcmp  $CAPTUREFILE .mahout-data/${PRODVERSION}.pgcmp $LABEL $PRODVERSION false

    # But if there are no differences, then we need to add mahout
    # schema as is added by mahout install/init, and indicate
    # that it was marked as OK with the specified version
    local SETUPQ=$PWD/.mahout-temp/mahout-attach-setup
    mahout_initialize_schema > ${SETUPQ}
    echo " insert into action_log (action_start, action_end, action, version, action_type, action_source, result, success) values (clock_timestamp(), clock_timestamp(), 'attach mahout', '${PRODVERSION}', 'attach', 'mahout', 'initialized', 't');
    insert into version_log (version, install_start, install_end) values ('${PRODVERSION}', clock_timestamp(), clock_timestamp());
  commit;" >> ${SETUPQ}

    $PGBINDIR/psql -d ${MAINDATABASE} -f ${SETUPQ} > /dev/null 2>&1
    retcode=$?
    if [ $retcode -ne 0 ]; then
	glog user.error "Unable to setup mahout schema ${MAHOUTSCHEMA} in database [${MAINDATABASE}]"
	exit 1
    else
	glog user.info "Setup mahout schema ${MAHOUTSCHEMA} in database [${MAINDATABASE}]"
	rm -f ${SETUPQ}
    fi
    glog user.notice "mahout attach completed for version [${PRODVERSION}] in database [${MAINDATABASE}]"
    summary attach
}

function mahout_slony_attach () {
    local PRODVERSION=${PARM1}
    local CMPDATA
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT

    INMAHOUT=$(in_mahout_home)
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "attach: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    
    # acquire configuration from mahout.conf
    read_mahout_config
    glog user.info "Attaching version [${PRODVERSION}] changes to database MAINDATABASE=[${MAINDATABASE}]"
    # Verify that the version PRODVERSION matches against a valid
    # version, e.g. - one where there is a dump found in .mahout-data
    CMPDATA=${PWD}/.mahout-data/${PRODVERSION}.pgcmp
    if [[ -e ${CMPDATA} ]]; then
	glog user.info "Found comparison data for version - [${CMPDATA}]"
    else
	glog user.error "No comparison data found for version [${PRODVERSION}] - [${CMPDATA}]"
	exit 1
    fi

    ## Need to check ALL the nodes for this stuff...
    ## Grab the list of nodes involved with the set SLONYMAINSET, providers AND subscribers
    NODEQUERY="select sub_provider from \"_${SLONYCLUSTER}\".sl_subscribe where sub_set=${SLONYMAINSET}
           union select sub_receiver from \"_${SLONYCLUSTER}\".sl_subscribe where sub_set=${SLONYMAINSET};"
    SLONYNODES=$($PGBINDIR/psql -d $MAINDATABASE -qAt -c "${NODEQUERY}" | sort -n)
    nodeprobs=false
    for slnode in $(echo $SLONYNODES); do
	# ask for connection path for that node
	SLCPATHQ="select pa_conninfo from \"_${SLONYCLUSTER}\".sl_path where pa_server=${slnode} limit 1;"
	NODEDBCONN=$($PGBINDIR/psql -d $MAINDATABASE -qAt -c "${SLCPATHQ}")
	glog user.info "Checking node [${slnode}] for Mahout hygiene at ${NODEDBCONN}"

	# Verify that the database does NOT have Mahout installed, e.g. -
	# no Mahout schema
	query="select count(1) from pg_catalog.pg_namespace where nspname = '${MAHOUTSCHEMA}';"
	scount=$($PGBINDIR/psql -d "${NODEDBCONN}" -c "${query}" -qAt)
	if [[ ${scount} != 0 ]]; then
	    glog user.error "attach: database ${NODEDBCONN} already has ${MAHOUTSCHEMA} schema - apparently already mahout-ized"
	    nodeprobs=true
	fi
	
	# run pgcmp to see differences versus the specified version
	# any unexpected differences lead to failing the install
	LABEL="node-${slnode}-${PRODVERSION}"
	CAPTUREFILE=${PWD}/.mahout-temp/attach-node-${slnode}-${PRODVERSION}.pgcmp
	pgcmp_dump_current "${LABEL}" ${CAPTUREFILE} ${NODEDBCONN}

	# Now, run pgcmp against the two schemas:
	PGCMPWORK=$(mktemp -d $PWD/.mahout-temp/mahout-attach-pgcmp-work.XXXXXXXXXXX)
	PGCWORKDIR=$PGCMPWORK mahout_pgcmp  $CAPTUREFILE .mahout-data/${PRODVERSION}.pgcmp $LABEL $PRODVERSION true
    done
    case $nodeprobs in
	false)
	    glog user.notice "No problems found when checking replication nodes against Mahout install"
	    ;;
	true)
	    glog user.error "Problems found when checking replication nodes against Mahout install"
	    exit 1
	    ;;
	*)
	    glog user.error "invalid nodeprobs - [${nodeprobs}] - should be true/false"
	    exit 1
    esac

    #  So, hygiene is good.  No differences.  Time to add Mahout
    #  schema to all the nodes

    local SETUPQ=$PWD/.mahout-temp/mahout-attach-setup
    mahout_initialize_schema > ${SETUPQ}
    echo " insert into action_log (action_start, action_end, action, version, action_type, action_source, result, success) values (clock_timestamp(), clock_timestamp(), 'slony attach mahout', '${PRODVERSION}', 'slony_attach', 'mahout', 'initialized', 't');
    insert into version_log (version, install_start, install_end, status) values ('${PRODVERSION}', clock_timestamp(), clock_timestamp(), 'initial');
  commit;" >> ${SETUPQ}

    nodeprobs=false
    for slnode in $(echo $SLONYNODES); do
	# ask for connection path for that node
	SLCPATHQ="select pa_conninfo from \"_${SLONYCLUSTER}\".sl_path where pa_server=${slnode} limit 1;"
	NODEDBCONN=$($PGBINDIR/psql -d $MAINDATABASE -qAt -c "${SLCPATHQ}")
	glog user.notice "Attach Mahout schema to node ${slnode}"

	$PGBINDIR/psql -d ${NODEDBCONN} -f ${SETUPQ} > /dev/null 2>&1
	
	retcode=$?
	if [ $retcode -ne 0 ]; then
	    glog user.error "Unable to setup mahout schema ${MAHOUTSCHEMA} in database [${NODEDBCONN}] - script $SETUPQ"
	    nodeprobs=true
	else
	    glog user.notice "Setup mahout schema ${MAHOUTSCHEMA} in database [${NODEDBCONN}]"
	fi
    done
    case $nodeprobs in
	false)
	    glog user.notice "No problems attaching Mahout schema to Slony nodes"
	    rm -f ${SETUPQ}
	    ;;
	true)
	    glog user.error "Problems found when attaching Mahout schema to Slony nodes"
	    exit 1
	    ;;
	*)
	    glog user.error "invalid nodeprobs - [${nodeprobs}] - should be true/false"
	    exit 1
    esac
    glog user.notice "mahout attach completed for version [${PRODVERSION}] in database [${MAINDATABASE}]"
    summary slony_attach
}

### Applying DDL via slonik...
### Overview...
### - hygiene checks, that Mahout is in good shape
### - verify that DB node is the origin for the set
### - pull list of other nodes
### - iterate through nodes, verifying
###   - Version matches
###   - dump schema via pgcmp, verify that each node matches the mahout-provided data
###   - Get shape of cluster
###   - calculate dependencies (of dependencies in Mahout)
###   - for each version being upgraded
###     - loop through actions
###       - For DDL:
###         - determine the tables to be dropped, put SET DROP TABLE into slonik script
###            We just did a pgcmp run, so can use that database...
###            psql -d ${COMPARISONDATABASE} -c get_list_of_tables
###         - determine the sequences to be dropped, put SET DROP SEQUENCE into slonik script
###         - put EXECUTE SCRIPT for each ddl script
###         - CREATE SET for the new set
###           create set (id=$SLONYTEMPSET, origin=$ORIGINNODEID, comment='Mahout set for upgrade from $DBVERSION');
###         - determine the tables to be added, generating SET ADD TABLE
###      #     set add table (set id=$SLONYTEMPSET, id=???, origin=$ORIGINNODEID, fully qualified name='table name', comment='upgraded by Mahout');
###         - determine the sequences to be added, generating SET ADD SEQUENCE
###      #     set add sequence (set id=$SLONYTEMPSET, id=???, origin=$ORIGINNODEID, fully qualified name='table name', comment='upgraded by Mahout');
###         - series of SUBSCRIBE SET, order based on NODEORDERFILE
###     #   - wait for event (origin=all, confirmed=all, wait on=$ORIGINNODE);
###         - MERGE SET 
###       - for dml:
###         - run against origin node
###       - for unix:
###         - run against origin node

function mahout_slonik () {
    # starts similarly to mahout_upgrade, checking hygiene
    
    # check that we're in a Mahout directory
    local INMAHOUT
    local PGCMPOUTPUT
    
    INMAHOUT=$(in_mahout_home)
    if [[ ${INMAHOUT} != 0 ]]; then
	glog user.error "slonik: not in mahout directory - ${INMAHOUT}"
	exit 1
    fi
    # acquire configuration from mahout.conf
    read_mahout_config
    # check the version in the database
    PRODVERSION=$(get_mahout_version ${MAINDATABASE})
    glog user.info "slonik: found version: ${PRODVERSION} on node [${MAINDATABASE}]"
    
    CMPDATA=${PWD}/.mahout-data/${PRODVERSION}.pgcmp
    if [[ -e ${CMPDATA} ]]; then
	glog user.info "Found comparison data for version - [${CMPDATA}]"
    else
	glog user.error "No comparison data found for version [${PRODVERSION}] - [${CMPDATA}]"
	exit 1
    fi

    # Is the main database the origin?
    QMAINDBORIGIN="select set_origin=\"_${SLONYCLUSTER}\".getlocalnodeid('_${SLONYCLUSTER}') from \"_${SLONYCLUSTER}\".sl_set where set_id = ${SLONYMAINSET};"
    ISDBORIGIN=$($PGBINDIR/psql -d $MAINDATABASE -qAt -c "${QMAINDBORIGIN}")
    rc=$?
    case ${rc} in
	0)
	    case $ISDBORIGIN in
		t)
		    glog user.info "Main database [${MAINDATABASE}] is origin for replication set [${SLONYMAINSET}], OK"
		    ;;
		f)
		    glog user.error "Main database [${MAINDATABASE}] is not origin for replication set [${SLONYMAINSET}]"
		    exit 1
		    ;;
		*)
		    glog user.error "Main database [${MAINDATABASE}] is not origin for replication set [${SLONYMAINSET}] - query result [${ISDBORIGIN}]"
		    exit 1
		    ;;
	    esac
	    ;;
	1)
	    glog user.error "unable to ascertain if [${MAINDATABASE}] is origin for replication set [${SLONYMAINSET}]"
	    exit 1
	    ;;
	2)
	    glog user.error "unable to connect to node [${MAINDATABASE}]"
	    nodeprobs=true
	    exit 1
	    ;;
	3)
	    glog user.error "unable to query node for whether it is origin [${MAINDATABASE}]"
	    nodeprobs=true
	    exit 1
	    ;;
    esac

    nodeprobs=false
    ## Need to check ALL the nodes for this stuff...
    ## Grab the list of nodes involved with the set SLONYMAINSET, providers AND subscribers
    NODEQUERY="select sub_provider from \"_${SLONYCLUSTER}\".sl_subscribe where sub_set=${SLONYMAINSET}
           union select sub_receiver from \"_${SLONYCLUSTER}\".sl_subscribe where sub_set=${SLONYMAINSET};"
    SLONYNODES=$($PGBINDIR/psql -d $MAINDATABASE -qAt -c "${NODEQUERY}" | sort -n)
    for slnode in $(echo $SLONYNODES); do
	# ask for connection path for that node
	SLCPATHQ="select pa_conninfo from \"_${SLONYCLUSTER}\".sl_path where pa_server=${slnode} limit 1;"
	NODEDBCONN=$($PGBINDIR/psql -d $MAINDATABASE -qAt -c "${SLCPATHQ}")
	glog user.info "Checking node [${slnode}] for Mahout hygiene at ${NODEDBCONN}"

	# Verify that the database does agrees on latest Mahout version
	versionquery="select version from \"${MAHOUTSCHEMA}\".version_log order by install_end desc limit 1;"
	nodeversion=$($PGBINDIR/psql -d "${NODEDBCONN}" -c "${versionquery}" -qAt)
	rc=$?
	case ${rc} in
	    0)
		glog user.notice "node ${slnode} - [${NODEDBCONN}] has version [${nodeversion}]"
		;;
	    1)
		glog user.error "unable to get version for node ${slnode} - [${NODEDBCONN}]"
		nodeprobs=true
		;;
	    2)
		glog user.error "unable to connect to node ${slnode} - [${NODEDBCONN}]"
		nodeprobs=true
		;;
	    3)
		glog user.error "unable to query node for version - ${slnode} - [${NODEDBCONN}]"
		nodeprobs=true
		;;
	esac
        if [[ $nodeversion == $PRODVERSION ]]; then
	    glog user.notice "node $slnode has version $nodeversion matching main node"
	else
	    glog user.error "node $slnode has version $nodeversion mismatching main node with $PRODVERSION"
	    nodeprobs=true
	fi

	# run pgcmp to capture the node-specific data
	LABEL="node-${slnode}-${PRODVERSION}"
	CAPTUREFILE=${PWD}/.mahout-temp/attach-node-${slnode}-${PRODVERSION}.pgcmp
	pgcmp_dump_current "${LABEL}" ${CAPTUREFILE} ${NODEDBCONN}

	# And run pgcmp against the two schemas
	PGCMPWORK=$PWD/.mahout-temp/mahout-attach-pgcmp-work
	mkdir -p $PGCMPWORK
	mkdir -p $PWD/.slony
	
	PGCWORKDIR=$PGCMPWORK mahout_pgcmp_nodeprobs  $CAPTUREFILE .mahout-data/${PRODVERSION}.pgcmp $LABEL $PRODVERSION true
    done
    case $nodeprobs in
	false)
	    glog user.notice "No problems found when checking replication nodes against Mahout install"
	    ;;
	true)
	    glog user.error "Problems found when checking replication nodes against Mahout install"
	    exit 1
	    ;;
	*)
	    glog user.error "invalid nodeprobs - [${nodeprobs}] - should be true/false"
	    exit 1
    esac

    # Very similar to mahout_capture, except that it doesn't write out md5sum/pgcmp output
    local depfodder=$PWD/.mahout-temp/mahout-slonik-dependency-fodder
    local dependencies=$PWD/.mahout-temp/mahout-slonik-dependencies
    local versionorder=$PWD/.mahout-temp/mahout-slonik-version-order
    local versioncontent=$(mktemp -d $PWD/.mahout-temp/mahout-slonik-version-content.XXXXXXXXXXXX)
    local slonikscript=${PWD}/.slony/slonik-from-${DBVERSION}.slonik

    # Find the shape of the cluster, because we need to SUBSCRIBE SET for each relevant node
    # SLONYCLUSTER
    CLSHAPEQ="select sub_provider, sub_receiver from \"_${SLONYCLUSTER}\".sl_subscribe where sub_set=${SLONYMAINSET};"
    SHAPEFILE=$PWD/.mahout-temp/slony-node-orderings-src.txt
    NODEORDERFILE=$PWD/.mahout-temp/slony-node-orderings.txt
    $PGBINDIR/psql -d "${MAINDATABASE}" -qAt --field-separator=" " -c "${CLSHAPEQ}" > $SHAPEFILE
    glog user.info "Generated $SHAPEFILE with list of subscriptions for replication set $SLONYMAINSET"
    tsort < $SHAPEFILE > $NODEORDERFILE
    glog user.info "Generated $NODEORDERFILE with order of subscriptions for replication set $SLONYMAINSET"

    # What all do we need?
    #   - figure out origin node ID - ORIGINNODEID
    local ORIGINNODEID
    QORIGIN="select set_origin from \"_${SLONYCLUSTER}\".sl_set where set_id = ${SLONYMAINSET};"
    ORIGINNODEID=$($PGBINDIR/psql -d $MAINDATABASE -qAt -c "${QORIGIN}")
    rc=$?
    case ${rc} in
	0)
	    glog user.info "Found origin node ID: ${ORIGINNODEID}"
	    ;;
	1)
	    glog user.error "Fatal error finding node origin ID"
	    exit 1
	    ;;
	2)
	    glog user.error "Error querying node origin ID"
	    exit 1
	    ;;
	3)
	    glog user.error "Error querying node origin ID"
	    exit 1
	    ;;
    esac
    #   - slony preamble, already gotten earlier
    #      cluster name=$SLONYCLUSTER;
    #        plus per-node
    #      node $nodenum admin conninfo='something'
    SLONIKPREAMBLE=${PWD}/.slony/mahout-preamble.slonik
    echo "
cluster name=${SLONYCLUSTER};
" > $SLONIKPREAMBLE
    QNODES="select sub_provider from \"_${SLONYCLUSTER}\".sl_subscribe where sub_set = $SLONYMAINSET
                            union select sub_receiver from \"_${SLONYCLUSTER}\".sl_subscribe where sub_set = $SLONYMAINSET;"
    nodes=$($PGBINDIR/psql -d "${MAINDATABASE}" -qAt -c "${QNODES}" | sort -n)
    for node in $(echo $nodes); do
	QPATH="select min(pa_conninfo) from \"_${SLONYCLUSTER}\".sl_path where pa_server=$node;"
	conninfo=$($PGBINDIR/psql -d "${MAINDATABASE}" -qAt -c "${QPATH}")
	echo "node ${node} admin conninfo='${conninfo}';" >> $SLONIKPREAMBLE
    done

    calculate_dependencies ${depfodder} ${dependencies} ${versionorder}
    glog user.notice "calced dependencies"
    split_versions ${versioncontent}
    glog user.notice "captured versions into ${versioncontent}"

    # need get_mahout_version
    local DBVERSION=$(get_mahout_version "${MAINDATABASE}")
    glog user.notice "Main database on Mahout verson $DBVERSION"
    
    versionswanted=false
    for propversion in $(cat ${versionorder}); do
	if [[ $propversion == ${DBVERSION} ]]; then
	    # We have reached the point at which versions should get captured
	    versionswanted=true
	    glog user.notice "Capture examining versions to apply - already have ${propversion}"
	else
	    if [[ $versionswanted == "true" ]]; then
		# need to apply scripts to the database
		glog user.notice "Slonik needs to apply version ${propversion}"

		# Need to do this against each node, but much later!
		# version_load_start ${propversion}
		SLACTIONS=0
		
		glog user.notice "From script ${versioncontent}/${propversion}"
		while read line
		do
		    if [[ $(echo ${line} | egrep -c "^version ") -eq 1 ]]; then
			glog user.debug "no action apropos for version line"
		    fi
		    if [[ $(echo ${line} | egrep -c "^requires ") -eq 1 ]]; then
			vrequires=$(echo ${line} | sed "s/^requires[ \t]//")
			# This is where to do the pgcmp run to find tables/sequences
			# added/dropped
			# load old version in .mahout-data/$vrequires.pgcmp
			# load new version in .mahout-data/$propversion.pgcmp
			glog user.notice "Comparing $vrequires to $propversion to find objects to add/drop from replication"
			PGCMPWORK=$PWD/.mahout-temp/mahout-attach-pgcmp-work
			mkdir -p $PGCMPWORK
			glog user.notice "pgcmp expecting non-zero as we expect a difference; we wanted to load the data for 2 different schema versions in order to work with the differences"
			PGCWORKDIR=$PGCMPWORK mahout_pgcmp_nodeprobs .mahout-data/${vrequires}.pgcmp .mahout-data/${propversion}.pgcmp $vrequires $propversion true
			# Now, figure out the tables to be dropped
			DEADTABLESFILE=$PWD/.mahout-temp/mahout-slony-tables-dropped-${propversion}.txt
			DEADTABLESQUERY="\COPY (select object_name from unexplained_items where object_type = 'table' and difference_type = 'missing in 2nd DB') to '${DEADTABLESFILE}';"
			glog user.notice "Dump via $DEADTABLESQUERY"
			glog user.notice "Dump to $DEADTABLESFILE"
			$PGBINDIR/psql -d ${COMPARISONDATABASE} -c "${DEADTABLESQUERY}"
			DTCOUNT=$(wc -l < $DEADTABLESFILE)
			glog user.notice "Found [${DTCOUNT}] dead tables"
			DROPTABLESSLONIK=$PWD/.slony/mahout-slony-tables-dropped-${propversion}.slonik
			DROPTABLESSQL=$PWD/.mahout-temp/mahout-slony-tables-dropped-${propversion}.sql
			echo "
drop table if exists t_dropped_tables, t_droptab_slonik;
create temp table t_dropped_tables (table_name text primary key, slony_id integer);
\COPY t_dropped_tables (table_name) from '${DEADTABLESFILE}';
analyze t_dropped_tables;
update t_dropped_tables set slony_id = (select tab_id from \"_${SLONYCLUSTER}\".sl_table
     where table_name = quote_ident(tab_nspname) || '.' || quote_ident(tab_relname));
create temp table t_droptab_slonik (table_name text, slonik text, tab_id integer, echo_text text);
insert into t_droptab_slonik (table_name, slonik, tab_id, echo_text)
select table_name, 'set drop table (origin=${ORIGINNODEID}, id='|| 
     case when slony_id is null then 'TBD' else slony_id::text end || ');', slony_id,
     'echo ' || quote_literal('drop table ' || table_name) || ';'
from t_dropped_tables;
\COPY (select slonik || echo_text from t_droptab_slonik) to '${DROPTABLESSLONIK}';
" > $DROPTABLESSQL

			$PGBINDIR/psql -d ${MAINDATABASE} -f "${DROPTABLESSQL}"
			DTCOUNT=$(wc -l < $DROPTABLESSLONIK)
			glog user.notice "Slonik script handles [${DTCOUNT}] dead tables"
			DEADSEQUENCESFILE=$PWD/.mahout-temp/mahout-slony-sequences-dropped-${propversion}.txt
			DEADSEQUENCEQUERY="\COPY (select object_name from unexplained_items where object_type = 'sequence' and difference_type = 'missing in 2nd DB') to '${DEADSEQUENCESFILE}';"
			glog user.notice "Dump via $DEADSEQUENCEQUERY"
			glog user.notice "Dump to $DEADSEQUENCESFILE"
			$PGBINDIR/psql -d ${COMPARISONDATABASE} -c "${DEADSEQUENCEQUERY}"
			DSCOUNT=$(wc -l < $DEADSEQUENCESFILE)
			glog user.notice "Found [${DSCOUNT}] dead sequences"
			DROPSEQUENCESSLONIK=$PWD/.slony/mahout-slony-sequences-dropped-${propversion}.slonik
			DROPSEQUENCESSQL=$PWD/.mahout-temp/mahout-slony-sequences-dropped-${propversion}.sql
			echo "
drop table if exists t_dropped_sequences, t_dropseq_slonik;
create temp table t_dropped_sequences (sequence_name text primary key, slony_id integer);
\COPY t_dropped_sequences (sequence_name) from '${DEADSEQUENCESFILE}';
analyze t_dropped_sequences;
update t_dropped_sequences set slony_id = (select seq_id from \"_${SLONYCLUSTER}\".sl_sequence
     where sequence_name = quote_ident(seq_nspname) || '.' || quote_ident(seq_relname));
create temp table t_dropseq_slonik (sequence text, slonik text, seq_id integer, echo_text text);
insert into t_dropseq_slonik (sequence, slonik, seq_id, echo_text)
select sequence_name, 'set drop sequence (origin=${ORIGINNODEID}, id='|| 
     case when slony_id is null then 'TBD' else slony_id::text end || ');', slony_id,
     'echo ' || quote_literal('drop sequence ' || sequence_name) || ';'
from t_dropped_sequences;

\COPY (select slonik || echo_text from t_dropseq_slonik) to '${DROPSEQUENCESSLONIK}';
      " > $DROPSEQUENCESSQL
			
			$PGBINDIR/psql -d ${MAINDATABASE} -f "${DROPSEQUENCESSQL}"
			glog user.notice "Generated slonik to dead sequences"
			
			NEWTABLESFILE=$PWD/.mahout-temp/mahout-slony-tables-added-${propversion}.txt
			TABLESADDEDSQL="\copy (select object_name from unexplained_items where object_type = 'table' and difference_type='missing in 1st DB') to '${NEWTABLESFILE}';"
			$PGBINDIR/psql -d ${COMPARISONDATABASE} -c "${TABLESADDEDSQL}"
			NEWTABLESSLONIK=$PWD/.slony/mahout-slony-tables-added-${propversion}.slonik
			NEWTABLESSQL=$PWD/.mahout-temp/mahout-slony-tables-added-${propversion}.sql
			if [ "x$SLONYOMITTABLES" = "x" ]; then
			    glog user.notice "No omittable tables - [$SLONYOMITTABLES]"
			    DROPOMITTABLES=""
			else
			    glog user.notice "Omitting tables: ${SLONYOMITTABLES}"
			    DROPOMITTABLES="delete from t_added_tables where table_name in ${SLONYOMITTABLES};"
			fi
			
			echo "
create temp table t_added_tables (table_name text primary key);
\copy t_added_tables (table_name) from '${NEWTABLESFILE}';
analyze t_added_tables;
${DROPOMITTABLES}
create temp table t_slonik_code as 
select 'set add table (origin=${ORIGINNODEID}, set id=${SLONYTEMPSET}, tables='|| quote_literal('^'||table_name||'\$') || '); echo '|| quote_literal(table_name) ||  ';' as slonik from t_added_tables;
\copy (select slonik from t_slonik_code) to '${NEWTABLESSLONIK}';
" > $NEWTABLESSQL
			$PGBINDIR/psql -d ${COMPARISONDATABASE} -c "${TABLESADDEDSQL}"
			NTCOUNT=$(wc -l < $NEWTABLESFILE)
			glog user.notice "Found [${NTCOUNT}] new tables to be added to replication"
			$PGBINDIR/psql -d ${MAINDATABASE} -f "${NEWTABLESSQL}"
			glog user.notice "Generated Slonik for new tables"
			NEWSEQUENCESFILE=$PWD/.mahout-temp/mahout-slony-sequences-added-${propversion}.txt
			SEQUENCESADDEDSQL="\copy (select object_name from unexplained_items where object_type = 'sequence' and difference_type='missing in 1st DB') to '${NEWSEQUENCESFILE}';"
			$PGBINDIR/psql -d ${COMPARISONDATABASE} -c "${SEQUENCESADDEDSQL}"

			NEWSEQUENCESSLONIK=$PWD/.slony/mahout-slony-sequences-added-${propversion}.slonik
			NEWSEQUENCESSQL=$PWD/.mahout-temp/mahout-slony-sequences-added-${propversion}.sql
			if [ "x$SLONYOMITSEQUENCES" = "x" ]; then
			    DROPOMITSEQUENCES=""
			else
			    DROPOMITSEQUENCES="delete from t_added_sequences where sequence_name in ${SLONYOMITSEQUENCES};"
			fi
			echo "
create temp table t_added_sequences (sequence_name text primary key);
\copy t_added_sequences (sequence_name) from '${NEWSEQUENCESFILE}';
 analyze t_added_sequences;
${DROPOMITSEQUENCES}
create temp table t_slonik_code as 
select 'set add sequence (origin=${ORIGINNODEID}, set id=${SLONYTEMPSET}, sequences='|| quote_literal(sequence_name) || ');echo '|| quote_literal(sequence_name) ||  ';' as slonik from t_added_sequences;
\copy (select slonik from t_slonik_code) to '${NEWSEQUENCESSLONIK}';
" > $NEWSEQUENCESSQL
			$PGBINDIR/psql -d ${COMPARISONDATABASE} -c "${SEQUENCESADDEDSQL}"
			NSCOUNT=$(wc -l < $NEWSEQUENCESFILE)
			glog user.notice "Found [${NSCOUNT}] new sequences to be added to replication"
			$PGBINDIR/psql -d ${MAINDATABASE} -f "${NEWSEQUENCESSQL}"
			glog user.notice "Generated Slonik for new sequences"
			
			DDLADDSET=$PWD/.slony/mahout-ddl-add-set-${propversion}.slonik
			echo "create set (id=${SLONYTEMPSET}, origin=${ORIGINNODEID}, comment='Temporary set for Mahout to add data for version ${propversion}');" > $DDLADDSET

			DDLSLONIK=$PWD/.slony/mahout-ddl-script-${propversion}.slonik
			
			DDLEXECUTESLONIK=$PWD/.slony/mahout-ddl-execute-script-${propversion}.slonik

			SLVERSIONPREFIX=$PWD/.mahout-temp/slonik-log-version-prefix-${propversion}.sql
			echo "insert into \"${MAHOUTSCHEMA}\".version_log (version, install_start) values ('${propversion}', clock_timestamp());" > $SLVERSIONPREFIX
			echo "execute script (event node=${ORIGINNODEID}, filename='${SLVERSIONPREFIX}');echo 'Distribute version_log insert via EXECUTE SCRIPT';" > $DDLEXECUTESLONIK
			
			SUBSCRIBESETS=$PWD/.slony/slonik-subscribe-sets-${propversion}.slonik
			echo "echo 'Subscribe nodes to temporary replication set ${SLONYTEMPSET}';" > $SUBSCRIBESETS
			for node in $(cat $NODEORDERFILE); do
			    if [[ $node -ne $ORIGINNODEID ]]; then
				QPROVIDER="select sub_provider from \"_${SLONYCLUSTER}\".sl_subscribe where sub_set=${SLONYMAINSET} and sub_receiver=${node};"
				provider=$($PGBINDIR/psql -d "${MAINDATABASE}" -qAt -c "${QPROVIDER}")
				echo "subscribe set (id=${SLONYTEMPSET}, provider=$provider, receiver=$node, forward=yes);echo 'subscribing node ${node} to replication set ${SLONYTEMPSET}'; sync (id=${ORIGINNODEID});
sync (id=${ORIGINNODEID});
wait for event (origin=${ORIGINNODEID}, confirmed=$node, wait on=$node);echo 'waited for completion of node ${node} subscription';
" >> $SUBSCRIBESETS
			    fi
			done
			echo "echo 'Merge temporary set ${SLONYTEMPSET} into main set ${SLONYMAINSET}'; merge set (id=${SLONYMAINSET}, add id=${SLONYTEMPSET}, origin=$ORIGINNODEID); echo '${SLONYTEMPSET} merged';" >> $SUBSCRIBESETS
		    fi
		    if [[ $(echo ${line} | egrep -c "^ddl ") -eq 1 ]]; then
			local sqlscript=$(echo ${line} | cut -d " " -f 2)
			glog user.notice "add DDL Script ${sqlscript}"
			md5sum=$(md5sum < ${sqlscript})
			SLACTIONS=$(( $SLACTIONS+1 ))
			SLEXECPREFIX=$PWD/.mahout-temp/slonik-pre-action-log-${propversion}-${SLACTIONS}.sql
			echo "insert into \"${MAHOUTSCHEMA}\".action_log (version, action_start, action, action_type, action_source, action_md5) values ('${propversion}', clock_timestamp(), 'slonik', 'DDL script', '${sqlscript}', '${md5sum}');" > $SLEXECPREFIX
			echo "execute script (filename='${SLEXECPREFIX}', event node=$ORIGINNODEID);echo 'begin action_log for ${sqlscript}';" >> $DDLEXECUTESLONIK
			if [[ $MAHOUTSEARCHPATH == '' ]]; then
			    glog user.notice "No MAHOUTSEARCHPATH set"
			else
			    echo "execute script (sql='set search_path to ${MAHOUTSEARCHPATH};', event node=$ORIGINNODEID);echo 'reset search_path to ${MAHOUTSEARCHPATH}';" >> $DDLEXECUTESLONIK
			fi
			echo "execute script (filename='${sqlscript}', event node=$ORIGINNODEID);echo 'Invoke DDL: ${sqlscript}';" >> $DDLEXECUTESLONIK
			SLEXECSUFFIX=$PWD/.mahout-temp/slonik-post-action-log-${propversion}-${SLACTIONS}.sql
			echo "update \"${MAHOUTSCHEMA}\".action_log set result='completed', success='true', action_end=clock_timestamp() where version='${propversion}' and action='slonik' and action_type='DDL script' and action_source='${sqlscript}' and action_md5 = '${md5sum}' and action_end is null;" > $SLEXECSUFFIX
			echo "execute script (filename='${SLEXECSUFFIX}', event node=$ORIGINNODEID); echo 'complete action_log for ${sqlscript}';" >> $DDLEXECUTESLONIK
		    fi

		    if [[ $(echo ${line} | egrep -c "^unix ") -eq 1 ]]; then
			local unixcommand=$(echo ${line} | cut -d " " -f 2)
			local unixarg=$(echo ${line} | cut -d " " -f 3)
			cat ${unixcommand} | md5sum > ${unixcommand}.md5sum
			
			action_start ${propversion} "slonik" "unix script" "${unixcommand}" "${md5sum}"			
			MAINDATABASE=${MAINDATABASE} ./${unixcommand} ${!unixarg} > ${unixcommand}.${propversion}.log 2>&1
			action_end ${propversion} "slonik" "unix script" "${unixcommand}" "${md5sum}" t
			## And indicate application on other nodes
			QNONREPLICAS="select distinct sub_receiver from \"_${SLONYCLUSTER}\".sl_subscribe where sub_set=${SLONYMAINSET};"
			SUBNODES=$($PGBINDIR/psql -d "${MAINDATABASE}" -qAt -c "${QREPLICAS}")
			for node in $(echo $SUBNODES); do
			    glog user.notice "Indicate application of UNIX script to non-origin nodes"
			    QSUBCONN="select pa_conninfo from \"_${SLONYCLUSTER}\".sl_path where pa_server=$node limit 1;"
			    subconninfo=$($PGBINDIR/psql -d "${MAINDATABASE}" -qAt -c "${QSUBCONN}")
			    $PGBINDIR/psql -d "${subconninfo}" -c "insert into action_log(action_start, action_end, action, version, action_type, action_source, result, action_md5, success) values (now(), now(), 'slonik', '${propversion}', 'unix script - replica', '${unixcommand}', '${md5sum}','t');"
			done
		    fi
		    
		    if [[ $(echo ${line} | egrep -c "^dml ") -eq 1 ]]; then
			local dmlscript=$(echo ${line} | cut -d " " -f 2)
			local dmlarg=$(echo ${line} | cut -d " " -f 3)
			cat ${dmlscript} | md5sum > ${dmlscript}.md5sum
			
			action_start ${propversion} "slonik" "dml script" "${dmlscript}" "${md5sum}"
			if [[ $MAHOUTSEARCHPATH == '' ]]; then
			    glog user.notice "No MAHOUTSEARCHPATH set"
			    $PGBINDIR/psql -d $MAINDATABASE -f ${dmlscript} > ${dmlscript}.${propversion}.log 2>&1			    
			    rc=$?
			else
			    PGOPTIONS="--search_path=${MAHOUTSEARCHPATH}" $PGBINDIR/psql -d $MAINDATABASE -f ${dmlscript} > ${dmlscript}.${propversion}.log 2>&1
			    rc=$?
			fi
			# check return code, various possible actions...
			action_end ${propversion} "slonik" "dml script" "${dmlscript}" "${md5sum}" t
			## And indicate application on other nodes
			QNONREPLICAS="select distinct sub_receiver from \"_${SLONYCLUSTER}\".sl_subscribe where sub_set=${SLONYMAINSET};"
			SUBNODES=$($PGBINDIR/psql -d "${MAINDATABASE}" -qAt -c "${QREPLICAS}")
			for node in $(echo $SUBNODES); do
			    glog user.notice "Indicate application of DML script to non-origin nodes"
			    QSUBCONN="select pa_conninfo from \"_${SLONYCLUSTER}\".sl_path where pa_server=$node limit 1;"
			    subconninfo=$($PGBINDIR/psql -d "${MAINDATABASE}" -qAt -c "${QSUBCONN}")
			    $PGBINDIR/psql -d "${subconninfo}" -c "insert into action_log(action_start, action_end, action, version, action_type, action_source, result, action_md5, success) values (now(), now(), 'slonik', '${propversion}', 'dml script - replica', '${dmlscript}', '${md5sum}','t');"
			done
		    fi
		    
		    if [[ $(echo ${line} | egrep -c "^psqltest ") -eq 1 ]]; then
			glog user.debug "no action apropos for psqltest on slonik"
		    fi
		    if [[ $(echo ${line} | egrep -c "^common tests ") -eq 1 ]]; then
			glog user.debug "no action apropos for common tests on slonik"
		    fi
		    glog user.debug "line of ${propversion}: ${line}"
		done < ${versioncontent}/${propversion}
		
		# Apply new version to it...
		SLVERSIONSUFFIX=$PWD/.mahout-temp/slonik-log-version-${propversion}.sql
		echo "update \"${MAHOUTSCHEMA}\".version_log set install_end = clock_timestamp(), status = 'completed' where version = '${propversion}';" > $SLVERSIONSUFFIX
		echo "execute script (filename='${SLVERSIONSUFFIX}', event node=$ORIGINNODEID); echo 'complete mahout logs for version ${propversion}';" >> $DDLEXECUTESLONIK

		# After end of loop, assemble the slonik script and run it, then...
		DDLACTIONSTART=$PWD/.mahout-temp/mahout-ddl-start-execute-script.sql
		echo "include <${PWD}/.slony/mahout-preamble.slonik>;" > $DDLSLONIK
		echo "" > $DDLSLONIK
		for addition in $PWD/.slony/mahout-preamble.slonik $DROPTABLESSLONIK $DROPSEQUENCESSLONIK $DDLEXECUTESLONIK $DDLADDSET $NEWTABLESSLONIK $NEWSEQUENCESSLONIK $SUBSCRIBESETS; do
		    if [ -s $addition ]; then
			echo "# from ${addition}" >> $DDLSLONIK
			cat $addition >> $DDLSLONIK
		    else
			echo "# ${addition} was empty" >> $DDLSLONIK
		    fi
		done
		glog user.notice "Slonik DDL generated and ready to apply: $DDLSLONIK"
		glog user.notice "\$> ${PGBINDIR}/slonik ${DDLSLONIK}"
   	    else
		glog user.debug "Slonik not applying earlier version ${propversion}"
	    fi
	fi
    done		
    rm -f ${depfodder} ${dependencies} ${versionorder}
    rm -rf ${versioncontent} ${PGCMPWORK}
    summary slonik
}

case $SUBCOMMAND in
    init)
	mahout_init ${PARM1}
	;;
    capture)
	mahout_capture
	;;
    attach)
	mahout_attach ${PARM1}
	;;
    check)
	mahout_check
	;;
    install)
	mahout_install ${PARM1}
	;;
    upgrade)
	mahout_upgrade
	;;
    diff)
	mahout_diff
	;;
    slonik)
	mahout_slonik
	;;
    slony_attach)
	mahout_slony_attach ${PARM1}
	;;
    history)
	mahout_history
	;;
    changes)
	mahout_changes
	;;
    validate_control)
	validate_control
	;;
    build)
	mahout_build ${PARM1} ${PARM2}
	;;
    *)
	echo "Invalid subcommand - [${COMMAND}]"
	help
	exit 2
	;;
esac
