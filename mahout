#!/bin/bash

COMMAND=$1
MAHOUTHOME=$2

help () {
     echo "
mahout: a schema management tool for PostgreSQL

mahout commands:
 mahout init
    Initializes a mahout project
 mahout capture
    Captures pgcmp files to use for database schema comparisons
 mahout attach
    Attaches a particular version label to the present database schema
 mahout check
    Checks the version indicated by mahout.conf and checks the schema against
    that version using pgcmp
 mahout upgrade
    Performs an upgrade from the present version to the latest/specified version
 mahout diff
    Finds differences between the current version and what is expected
 mahout slonik
    Prepares a slonik script to install replication against the latest/specified version
 mahout history
    List mahout upgrade activities performed against the local database
 mahout versions
    Walk through configuration to get all available versions, and check
    which have been applied against the database
 mahout changes
    List mahout scripts to be applied.
    List objects that are being changed by the upgrade
"
}

NOTICES=0
WARNINGS=0
PROBLEMS=0

function glog () {
    local level=$1
    local notice=$2
    logger -i -p "${level}" -t "mahout" "${notice}"
    echo "${level} mahout ${notice}"
    case ${level} in
	user.notice)
	    NOTICES=$((${NOTICES} + 1))
	    ;;
	user.warning)
	    WARNINGS=$((${WARNINGS} + 1))
	    ;;
	user.err)
	    PROBLEMS=$((${PROBLEMS} + 1))
	    ;;
    esac	    
}

function mahout_init () {
    local problems=0
    local MO
    local MDB
    local MSU
    local MCL
    local PGCH
    local PGCD
    local PGCC
    MDB=${MAINDATABASE:-${PGDATABASE:-"PGDATABASEUNSET"}}
    MSU=${SUPERUSERACCESS:-${PGDATABASE:-"SUPERUSERACCESSUNSET"}}
    MCL=${CLUSTERDATABASE:-${PGDATABASE:-"CLUSTERDATABASEUNSET"}}
    PGCH=${PGCMPHOME:-"/home/cbbrowne/PostgreSQL/pgcmp"}

    if [ -d $MAHOUTHOME ]; then
	glog user.err "Directory [${MAHOUTHOME}] already exists"
	exit 1
    else
	mkdir $MAHOUTHOME 
    fi
    
    MO=${MAHOUTHOME}/mahout.conf
    echo "mahout: setting up mahout repository in mahout directory: [${MO}]"
    echo "mahout: sample mahout.conf in ${MO}"
    echo "# Sample mahout file" > ${MO}
    echo "# MAINDATABASE: Main Database being managed by Mahout" >> ${MO}
    echo "MAINDATABASE=${MDB}" >> ${MO}
    echo "# SUPERUSERACCESS: Superuser URI for database being managed by Mahout" >> ${MO}
    echo "SUPERUSERACCESS=${MSU}" >> ${MO}
    echo "# CLUSTERDATABASE: URI for central database (e.g. - postgres DB) on cluster being managed by Mahout" >> ${MO}
    echo "CLUSTERDATABASE=${MCL}" >> ${MO}
    echo "# PGCMPHOME: location to find pgcmp, pgcmp-dump" >> ${MO}
    echo "PGCMPHOME=${PGCH}" >> ${MO}
    for pgm in pgcmp pgcmp-dump; do
	if [ -x ${PGCH}/${pgm} ]; then
	    glog user.notice "found ${PGCH}/${pgm} executable OK"
	else
	    glog user.err "did not find executable ${PGCH}/${pgm}"
	fi
    done
    echo "# Add additional configuration parameters for scripts after this" >> ${MO}

    MAHOUTCAP=${MAHOUTHOME}/.mahout-data
    if [ -d ${MAHOUTCAP} ]; then
	glog user.err "Capture directory MAHOUTCAP [${MAHOUTCAP}] already exists"
	exit 1
    else
	mkdir ${MAHOUTCAP}
	glog user.notice "Setting up directory MAHOUTCAP [${MAHOUTCAP}]"
    fi
    MAHOUTCTL=${MAHOUTHOME}/mahout.control
    if [ -e ${MAHOUTCTL} ]; then
	glog user.err "Control file MAHOUTCTL=[${MAHOUTCTL}] already exists"
    else
	echo "# Initialized mahout.control" > ${MAHOUTCTL}
	echo "# add sections after this to indicate versions" >> ${MAHOUTCTL}
	echo "version Base"  >> ${MAHOUTCTL}
	echo "psql Base/base-schema.sql"  >> ${MAHOUTCTL}
    fi
    case $PROBLEMS in
	0)
	    glog user.notice "mahout init complete: no serious configuration problems noticed"
	    ;;
	*)
	    glog user.notice "mahout init encountered ${PROBLEMS} serious configuration problems"
	    ;;
    esac

    mkdir $MAHOUTHOME/Base
    glog user.notice "Dumping database ${MDB} to Base/base-schema.sql"
    pg_dump -d ${MDB} -s > $MAHOUTHOME/Base/base-schema.sql
    glog user.notice "mahout: initial control file set up indicating schema from ${MDB} as schema"

    glog user.notice "mahout: please edit ${MO} to validate configuration parameters"
}

function mahout_capture () {
    echo "capture Not implemented yet"
    exit 1    
}

function mahout_check () {
    echo "check Not implemented yet"
    exit 1    
}

function mahout_upgrade () {
    echo "upgrade Not implemented yet"
    exit 1    
}

function mahout_diff () {
    echo "diff Not implemented yet"
    exit 1    
}

function mahout_slonik () {
    echo "slonik Not implemented yet"
    exit 1    
}

function mahout_history () {
    echo "versions Not implemented yet"
    exit 1    
}

function mahout_versions () {
    echo "versions Not implemented yet"
    exit 1    
}

function mahout_changes () {
    echo "changes Not implemented yet"
    exit 1    
}

function mahout_slonik () {
    echo "slonik Not implemented yet"
    exit 1    
}


case $COMMAND in
   init)
       mahout_init
       ;;
   capture)
       mahout_capture
       ;;
   attach)
       mahout_attach
       ;;
   check)
       mahout_check
       ;;
   upgrade)
       mahout_upgrade
       ;;
   diff)
       mahout_diff
       ;;
   slonik)
       mahout_slonik
       ;;
   history)
       mahout_history
       ;;
   versions)
       mahout_versions
       ;;
   changes)
       mahout_changes
       ;;
   *)
       echo "Invalid subcommand - [${COMMAND}]"
       help
       exit 2
       ;;
esac
